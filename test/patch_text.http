# Test sequence for patching text in elements of the storage.

# PATCH changes existing elements and attributes in storage.
# The position for the insert is defined via an XPath.
# The method works almost like PUT, but the XPath axis of the request
# always expects an existing target.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "230e07148e8d14445ec10e74ababf73e");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_patch_text}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "cf7b0ae6d7665bac3d5650ea7d51d02f");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "42c91cc49f6cd4f5341167b41494b4a7");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID-M 1x UID-A
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: application/xslt+xml

<book title="A2">
  <comment></comment>
</book>
<book title="B2">
  <comment></comment>
</book>
<book title="C2">
  <comment></comment>
</book>
<book title="D2">
  <comment></comment>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6174f32e5ac0db2a190f4b0c825ca0da");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Text A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f548f965612b5cc2c7f504eb9feda40d");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}(/books/book)/comment HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Text B

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5a925e8bd38f668b9bf9c955be5a1414");
});
%}

###
# Using unicode should not cause problems.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with encoded text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "df34303cc0c6c314ce33fdbb27f14ed3");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with books as text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

name(/*)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a27efdae715d93484be7a6928fe8a6c9");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Invalid expression)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "49c31c682fbdaea8b165dae31fbea0ec");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Unregistered function)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "96a11b1d1473ff1db7f2ae45a4ae83aa");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ee4c679f1f8b9fc274a25c95858de143");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

.

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d05657400dd30fea2a05734e059af96b");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..
PATCH {{service}}0x2f2a2f2e2e HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b4ae25894c58e7a7d01ca48959f97a2e");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..
PATCH {{service}}0x2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c2e9ec33cb1c35ef141599cd9036ee81");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "933969438e11f5dbe682cbefe5c070ed");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong/wrong HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "63f70e4f85c98d5ec992c0840e774467");
});
%}

###
# Preparation for the next test
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 10x UID-A, 1x UID-M
# - Storage-Revision is increased
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6" ___uid="KIC2D3GJ1DWE:35" ___rev="5">
    Text
    <!-- Comment -->
    Text
    <a><b></b></a>
  </text>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c4b055ce953df0b87c9ee5c17d6b4a3c");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage: text title="Text X6" includes only "test", comments and text were deleted
PATCH {{service}}/books/chapter%5B2%5D/text%5B3%5D HTTP/1.0
Storage: {{storage_patch_text}}
Accept-Effects: ALL
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fa7ef072c63d71a333f8b2a7ac735f41");
});
%}

###

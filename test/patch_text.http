# Test sequence for patching text in elements of the storage.

# PATCH changes existing elements and attributes in storage.
# The position for the insert is defined via an XPath.
# The method works almost like PUT, but the XPath axis of the request
# always expects an existing target.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d1990b34f7ceda0bae498277df18a239");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_patch_text}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e575659a7c50c9577b33a2b0cd6fa3b8");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1e550a808a6b7f6083b26242dfc3eb19");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID-M 1x UID-A
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: application/xslt+xml

<book title="A2">
  <comment></comment>
</book>
<book title="B2">
  <comment></comment>
</book>
<book title="C2">
  <comment></comment>
</book>
<book title="D2">
  <comment></comment>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "81c1eba5ae0042d61b35cef01258bdf1");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Text A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2d6fec287e78a57d781ce47b48d7e589");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}(/books/book)/comment HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Text B

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1fc0938e91f50d7d094e31d596b1bd64");
});
%}

###
# Using unicode should not cause problems.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with encoded text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "571376f15e80fca0bc33d84f155e9a9f");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with books as text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

name(/*)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "08a070a999112dcd26a23f48d5646a52");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Invalid expression)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5cb66e853102b7d65fd2c601ca18aed9");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Unregistered function)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6bb0ebbacbd0602d3203fbf49d8754ad");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e9e9ef5fc5e4d57eccd0bdaa2af2d8af");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

.

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "78e3719f48d41c423e99a6a404a48c66");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..
PATCH {{service}}0x2f2a2f2e2e HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1e5be9ebb24ec563b69d1e92d5cbd1d1");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..
PATCH {{service}}0x2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9a233d9ee34ae74827bdb71658626a74");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e698d1b1e98555697b698c90144dc23f");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong/wrong HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bebb3c8b518fc8dc822503a1d6f4140b");
});
%}

###
# Preparation for the next test
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 10x UID-A, 1x UID-M
# - Storage-Revision is increased
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6" ___uid="KIC2D3GJ1DWE:35" ___rev="5">
    Text
    <!-- Comment -->
    Text
    <a><b></b></a>
  </text>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "da45c7e39b2968b2ee5175855eec5644");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage: text title="Text X6" includes only "test", comments and text were deleted
PATCH {{service}}/books/chapter%5B2%5D/text%5B3%5D HTTP/1.0
Storage: {{storage_patch_text}}
Accept-Effects: ALL
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e695c11d3df2b55210fc3e6ed4e17801");
});
%}

###

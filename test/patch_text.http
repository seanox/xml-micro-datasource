# Test sequence for patching text in elements of the storage.
# TODO:

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c8ac3122a78965c2f04c6a5591f599d6");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_patch_text}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2bc4b73a66c1a8f6fe3b3e73e1447071");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID 
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c6ff531ab8475b2aa3f58b6aa09951a1");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID 
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: application/xslt+xml

<book title="A2">
  <comment></comment>
</book>
<book title="B2">
  <comment></comment>
</book>
<book title="C2">
  <comment></comment>
</book>
<book title="D2">
  <comment></comment>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "de2a13f0ae9c994406b08613152a9ee4");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID 
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Text A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a0227eb38594b5d685ec1d446ab07cfe");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID 
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}(/books/book)/comment HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Text B

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "311e5517fd64073dd49d9ae22bb0d3fd");
});
%}

###
# Using unicode should not cause problems.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID 
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with encoded text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "248d8a46b378e8af9ff12bfc5bfc8fe5");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID 
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with books as text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

name(/*)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d49640f5d2e01dc3b42b9b39c6aaab18");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Invalid expression)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "40a610567f8f19f99cad27f3a31db629");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Unregistered function)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "228e10482e931f231d06d67c1b5f5abc");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4dadbfb5d606b8e058e5e4d8bc810cd6");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

.

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e1c72bd1511aecced337bb7382dbdc21");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - URI: /*/..
PATCH {{service}}0x2f2a2f2e2e HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c958cfa7abf3a3307669c7fd90dc0fc3");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - URI: /books/..
PATCH {{service}}0x2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "be97d8fe42e451d8c4cbbccaed25fa81");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3585b6c56a958e7a810f830a498bfc9f");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong/wrong HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "28de188616465fcbe558cf3745922ae0");
});
%}

###

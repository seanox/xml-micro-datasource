# CONNECT is not an HTTP standard, alternative OPTIONS without path can be used.
# The behavior is the same.

# The following sequence is to test that requests to a storage with a custom
# root element, the storage and the name of the root element must be correctly
# specified in the request header.

###
# Header Storage is missing
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a8df4adcd255df6314166b922e431ccb");
});
%}

###
# Header Storage is empty
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage:

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a8df4adcd255df6314166b922e431ccb");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60____

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3be8c8592f41c531ba4cb44cc37ffe21");
});
%}

###
# Expectations:
# - Status code 201 Resource Created
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60___

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e80249b10b9f5a2a9e895793906be159");
});
%}

###
# The storage identifier with the max. length
# Expectations:
# - Status code 201 Resource Created
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60__A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f9dc3c27957dc31c1093e9e3401b5649");
});
%}

###
# The storage identifier is case-sensitive
# Expectations:
# - Status code 202 Accepted
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60__A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a14fb9ab15f0ff82ed6a922935bbf7ea");
});
%}

###
# The storage identifier is case-sensitive
# Expectations:
# - Status code 201 Resource Created
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60__a

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c88119c3582741b4a60a1475943cd408");
});
%}

###
# The storage identifier with the min. length
# Expectations:
# - Status code 201 Resource Created
CONNECT {{service}} HTTP/1.0
Storage: C

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9d078dc96781798911e1aa96728cd822");
});
%}

###
# The storage identifier with with invalid character(s)
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: ?

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5a492eb218bdfe58f6b865ebc97ca2e3");
});
%}

###
# Header Storage is to invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: UnitTest_Storage-C0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6acf462d86898b81fde6504333125e79");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be created.
# Expectations:
# - Status code 201 Resource Created
# - Connection-Unique: UID
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9bafcae4fde17be9596544a110d2b6c5");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be shared.
# Expectations:
# - Status code 202 Accepted
# - Connection-Unique: UID
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b2498c4b1e6e8e7c45ac6fd2a69a3005");
});
%}

###
# Name of the root element is not correct.
# Expectations:
# - Status code 404 Resource Not Found
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} bookS

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8a216e276a45ea9e9b771c66d06798e4");
});
%}

###
# Storage header is not correct.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books x

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8c9ebab0755662e6c2b0bdb62484eced");
});
%}

###
# Name of the root element is not correct.
# Without specification the default 'data' is used.
#   Storage header corresponds to: 
# Storage: UnitTest_Storage_C0 data
# Expectations:
# - Status code 404 Resource Not Found
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "995c59e4c2e65b76c188fc3f6c78dad2");
});
%}

###

# CONNECT is not an HTTP standard, alternative OPTIONS without path can be used.
# The behavior is the same.

# The following sequence is to test that requests to a storage with a custom
# root element, the storage and the name of the root element must be correctly
# specified in the request header.

###
# Header Storage is missing
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "59d59a9a5d39767ace824014ed73264c");
});
%}

###
# Header Storage is empty
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage:

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "59d59a9a5d39767ace824014ed73264c");
});
%}

###
# Header Storage is to short/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: 0000000000000000000000000000000000C

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "43802b0c495990a4b5f5d76d51607252");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: 0000000000000000000000000000000000C0X

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6bc94142380135fd83b9310f3e00a432");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: 000000000000000000000000000000000-C0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "85624548bccf21756bfe09438b8592bc");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be created.
# Expectations:
# - Status code 201 Resource Created
# - Connection-Unique: UID
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "cb31d489019952b2c22db35e72ff5d38");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be shared.
# Expectations:
# - Status code 202 Accepted
# - Connection-Unique: UID
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7969c65622ecd3a592602ee8a27fb1f9");
});
%}

###
# Name of the root element is not correct.
# Expectations:
# - Status code 404 Resource Not Found
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} bookS

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "481e8f7a38fddeaba491d832fbe74827");
});
%}

###
# Storage header is not correct.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books x

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ada64c580164e386be7c3d52bb0c186d");
});
%}

###
# Name of the root element is not correct.
# Without specification the default 'data' is used.
#   Storage header corresponds to: 
# Storage: 0000000000000000000000000000000000C0 data 
# Expectations:
# - Status code 404 Resource Not Found
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "67fd2b0c6de94eb33a697d780c2a91b4");
});
%}

###

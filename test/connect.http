# CONNECT is not an HTTP standard, alternative OPTIONS without path can be used.
# The behavior is the same.

# The following sequence is to test that requests to a storage with a custom
# root element, the storage and the name of the root element must be correctly
# specified in the request header.

###
# Header Storage is missing
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9e4c057ef0cd01f415169194d832b33b");
});
%}

###
# Header Storage is empty
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage:

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9e4c057ef0cd01f415169194d832b33b");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60____

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9b8c068bcae2f07a82480c70989619ed");
});
%}

###
# Expectations:
# - Status code 201 Resource Created
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60___

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "211d2d755ef374fafe3585cff81555ea");
});
%}

###
# The storage identifier with the max. length
# Expectations:
# - Status code 201 Resource Created
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60__A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c9961836a7ad06c6ad4abb1b425c3ec8");
});
%}

###
# The storage identifier is case-sensitive
# Expectations:
# - Status code 202 Accepted
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60__A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "52e64fce57e36f587e1578b8dd6ea39f");
});
%}

###
# The storage identifier is case-sensitive
# Expectations:
# - Status code 201 Resource Created
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60__a

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "707f52e98eaf4af2e903a9750b54626f");
});
%}

###
# The storage identifier with the min. length
# Expectations:
# - Status code 201 Resource Created
CONNECT {{service}} HTTP/1.0
Storage: C

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "11d254c446c9ed5e9ccb9d6e51ea2519");
});
%}

###
# The storage identifier with with invalid character(s)
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: ?

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d9f1f811dfea541cbdde95354b230b63");
});
%}

###
# Header Storage is to invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: UnitTest_Storage-C0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f5bf9486f5910e26fbecd23e8ea2a6c8");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be created.
# Expectations:
# - Status code 201 Resource Created
# - Connection-Unique: UID
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ee7daa9c2660b1b074ed4962fbd9157d");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be shared.
# Expectations:
# - Status code 202 Accepted
# - Connection-Unique: UID
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7b4a3d10cd0c2ec28427e662d47c81fe");
});
%}

###
# Name of the root element is not correct.
# Expectations:
# - Status code 404 Resource Not Found
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} bookS

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e87ece3c192fb79cfe19d2c5879096ce");
});
%}

###
# Storage header is not correct.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books x

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bb405d4c26db297ad2017f599336128c");
});
%}

###
# Name of the root element is not correct.
# Without specification the default 'data' is used.
#   Storage header corresponds to: 
# Storage: UnitTest_Storage_C0 data
# Expectations:
# - Status code 404 Resource Not Found
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "55fe06c9a5311a3f52cdd75a3d399b8e");
});
%}

###

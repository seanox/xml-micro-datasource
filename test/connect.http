# CONNECT is not an HTTP standard, alternative OPTIONS without path can be used.
# The behavior is the same.

# The following sequence is to test that requests to a storage with a custom
# root element, the storage and the name of the root element must be correctly
# specified in the request header.

###
# Header Storage is missing
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a5a5e3d369fb5890b7af406e5afa4696");
});
%}

###
# Header Storage is empty
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage:

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a5a5e3d369fb5890b7af406e5afa4696");
});
%}

###
# Header Storage is to short/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: 0000000000000000000000000000000000C

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b80fabf3bd88a0e97b3c02235f37fc3c");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: 0000000000000000000000000000000000C0X

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "534e378c0c2b42afabc66adaad21ad2b");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: 000000000000000000000000000000000-C0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f1cacdfd71115f58e1d11e0ee9929524");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be created.
# Expectations:
# - Status code 201 Resource Created
# - Connection-Unique: UID
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e3b1078939610568de9f1514dbea8cef");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be shared.
# Expectations:
# - Status code 202 Accepted
# - Connection-Unique: UID
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ba5dd326a52dda7990daadd7ce09afa3");
});
%}

###
# Name of the root element is not correct.
# Expectations:
# - Status code 404 Resource Not Found
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} bookS

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "10e3bd109027acaf60e155d5bda02de7");
});
%}

###
# Storage header is not correct.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books x

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "511c318226295775ca81b60b60e385e0");
});
%}

###
# Name of the root element is not correct.
# Without specification the default 'data' is used.
#   Storage header corresponds to: 
# Storage: 0000000000000000000000000000000000C0 data 
# Expectations:
# - Status code 404 Resource Not Found
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2f1c554ab45e6cfcbb321df5319127a8");
});
%}

###

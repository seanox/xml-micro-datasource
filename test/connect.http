# CONNECT is not an HTTP standard, alternative OPTIONS without path can be used.
# The behavior is the same.

# The following sequence is to test that requests to a storage with a custom
# root element, the storage and the name of the root element must be correctly
# specified in the request header.

###
# Header Storage is missing
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9e4c057ef0cd01f415169194d832b33b");
});
%}

###
# Header Storage is empty
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage:

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9e4c057ef0cd01f415169194d832b33b");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60____

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9b8c068bcae2f07a82480c70989619ed");
});
%}

###
# Expectations:
# - Status code 201 Resource Created
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60___

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ee05c9c319025adfbc9b5896ddd52c0e");
});
%}

###
# The storage identifier with the max. length
# Expectations:
# - Status code 201 Resource Created
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60__A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f0c23e562ee74905382d677635ae3f55");
});
%}

###
# The storage identifier is case-sensitive
# Expectations:
# - Status code 204 No Content
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60__A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1d1cb86332e111204a8c8f7f3e2104ba");
});
%}

###
# The storage identifier is case-sensitive
# Expectations:
# - Status code 201 Resource Created
CONNECT {{service}} HTTP/1.0
Storage: C________10________20________30________40________50________60__a

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "90c5b6e7d953c4074375acd4f5f2db6a");
});
%}

###
# The storage identifier with the min. length
# Expectations:
# - Status code 201 Resource Created
CONNECT {{service}} HTTP/1.0
Storage: C

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c4db82d1695d524cc4b6e36cf06f3beb");
});
%}

###
# The storage identifier with with invalid character(s)
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: ?

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d9f1f811dfea541cbdde95354b230b63");
});
%}

###
# Header Storage is to invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: UnitTest_Storage-C0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f5bf9486f5910e26fbecd23e8ea2a6c8");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be created.
# Expectations:
# - Status code 201 Resource Created
# - Connection-Unique: UID
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a47e06af6e2dd62b08048213beba3117");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be shared.
# Expectations:
# - Status code 204 No Content
# - Connection-Unique: UID
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1ac98cb941980de42a3d71c45f369de3");
});
%}

###
# Name of the root element is not correct.
# Expectations:
# - Status code 404 Resource Not Found
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} bookS

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "716c3dbeef9d86c3bb880d6117d5f846");
});
%}

###
# Storage header is not correct.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}} books x

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bb405d4c26db297ad2017f599336128c");
});
%}

###
# Name of the root element is not correct.
# Without specification the default 'data' is used.
#   Storage header corresponds to: 
# Storage: UnitTest_Storage_C0 data
# Expectations:
# - Status code 404 Resource Not Found
CONNECT {{service}} HTTP/1.0
Storage: {{storage_connect}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6f3ff9c045823f174ef8232641f73cf5");
});
%}

###

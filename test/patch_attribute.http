# Test sequence for putting of attributes to storage elements.

# PATCH changes existing elements and attributes in storage.
# The position for the insert is defined via an XPath.
# The method works almost like PUT, but the XPath axis of the request
# always expects an existing target.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4db0d1a70080997eaf69635725c7dbac");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_patch_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "344d7e56cc18f758965401084b5e535e");
});
%}

###
# Attribute does not exist
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "cf68ca7b1151d81bac658a80f0bf01aa");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "50e55e11fd3e8fb3bbc9d6d687f92558");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is patched
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<2>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4e735ebf79efcb94339d4279a55b98c4");
});
%}

###
# Using unicode should not cause problems
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is patched
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Double quotation marks and the & are encoded correctly
# - Unicode characters are inserted as UTF-8
# - Storage-Effects: 1x UID
PATCH {{service}}(/books)/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c299fdabdef6aa37a235cd6a72e2130d");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is patched
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
# - Double quotation marks and the & are encoded correctly
# - As value books is used
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

concat(name(/*), "-Test")

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "15a4d568213f11de6ec29a2a66f642b2");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Invalid expression)
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e8ae0f863b271d4384ab70e51c709418");
});
%}

###
# Using Unicode should not cause problems.
# Here the XML file of the storage is parsed again, which must also work with
# the previously inserted unicode.
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is patched
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8a74668fe93b1ddb2cbb7323fbc89c4f");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
# - Double quotation marks and the & are encoded correctly
# - As value books is used
PUT {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "33baf0e86a2016a28f237acb39f15fe5");
});
%}

###
# Expectations:
# - Status code 415 Unsupported Media Type
#   because the Content-Type is not text/plain.
PATCH {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain-x

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "00a926437780058fd65587b2f64d459e");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is patched
# - Storage-Effects: 1x UID
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Content-Length is mssing but without effect (by the REST Client)
PATCH {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<2>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6619a9845939ae9fad692ae3a47e1177");
});
%}

###
# Everything is case sensitive and therefore the attribute can't be found.
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books/@attrb HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<2>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "73606ba39b1aeecfce7e8a045826cb12");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___rev is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PATCH {{service}}/books/@___rev HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "64be9818e375468759c0c80d4ba45956");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___uid is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PATCH {{service}}/books/@___uid HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6096e2f5d95890731ebf97f1c61c6877");
});
%}

###
# No attributes can be set in the document.
# Expectations:
# - Status code 204 No Content
#   the addressing of the XML document is detected
# - Response without Storage-Effects header, such a request has no effect
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/@attrF HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ea8a57de5bbdeec08324a7f27373a9a3");
});
%}

###
# No attributes can be set in the document.
# Therefore none is found and status 404 occurs.
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/@attrF HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "84bd6356c4781a784d7a8b6e8787391b");
});
%}

###
# PATCH can only set attributes that exist
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7ea0d8bd039221ac8fe35c13f22bf431");
});
%}

###
# XPath as value is not supported
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PATCH {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "60683b0da58773e2dbdcc9db6d1f5138");
});
%}

###
# XPath with wrong function
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Unregistered function)
PATCH {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b7ac962c28778a34534d111a157edf8d");
});
%}

###
# PATCH outside the root element, shall be ignored
# but PATCH can only set attributes that exist
# Expectations:
# - Status code 404 Resource Not Found
# - URI: //books/../@___xxx
PATCH {{service}}0x2f2f626f6f6b732f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d2112ae96f2b7f44b9b96ef6b01b9501");
});
%}

###
# PATCH outside the root element, shall be ignored
# but PATCH can only set attributes that exist
# Expectations:
# - Status code 404 Resource Not Found
# - URI: /*/../@___xxx
PATCH {{service}}0x2f2a2f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5ca549d743dd536b744886c42da3bb0c");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong/@new HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d1e1aa0ae4458989dedbabbef6185abc");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong/wrong/@new HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "dcf8ddad86d1a399de151716395fa9a9");
});
%}

###

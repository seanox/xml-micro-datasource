# Test sequence for putting of attributes to storage elements.

# PATCH changes existing elements and attributes in storage.
# The position for the insert is defined via an XPath.
# The method works almost like PUT, but the XPath axis of the request
# always expects an existing target.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c63b7bbfce156cec8c9eadb27a0b688d");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_patch_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5b911d3ea8c1dd7f65af4c7f94fa77ed");
});
%}

###
# Attribute does not exist
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "83261d9170d503b85257a59af5f7c3cf");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "872d482e6ca9411ef87f6904df513397");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is patched
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<2>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "91a95b5435a5ffb31cbefcde5c5432f2");
});
%}

###
# Using unicode should not cause problems
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is patched
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Double quotation marks and the & are encoded correctly
# - Unicode characters are inserted as UTF-8
# - Storage-Effects: 1x UID
PATCH {{service}}(/books)/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "08142eef8407aee71579ff3c01f7b6f6");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is patched
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
# - Double quotation marks and the & are encoded correctly
# - As value books is used
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

concat(name(/*), "-Test")

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2ee3be1a93191daac1b796169bca2b87");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Invalid expression)
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5023f650c051d0c0a7049f312cb6d52f");
});
%}

###
# Using Unicode should not cause problems.
# Here the XML file of the storage is parsed again, which must also work with
# the previously inserted unicode.
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is patched
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e991d6f291965646f676767f5faeb0c2");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
# - Double quotation marks and the & are encoded correctly
# - As value books is used
PUT {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "77604d441c47fdb2337f76bbe1567d87");
});
%}

###
# Expectations:
# - Status code 415 Unsupported Media Type
#   because the Content-Type is not text/plain.
PATCH {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain-x

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bfa0b34965b31f3090951ec3da9f083c");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is patched
# - Storage-Effects: 1x UID
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Content-Length is mssing but without effect (by the REST Client)
PATCH {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<2>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a4fec620907e2d6cb0a1897a64a17a6e");
});
%}

###
# Everything is case sensitive and therefore the attribute can't be found.
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books/@attrb HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<2>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a72e4758ba9906eaf7f2e38cbdaa917b");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___rev is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PATCH {{service}}/books/@___rev HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "55770d9f07b1be8d21e6cf4c9c129bb4");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___uid is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PATCH {{service}}/books/@___uid HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "cd2896454482a29a65ebf233a9927886");
});
%}

###
# No attributes can be set in the document.
# Expectations:
# - Status code 204 No Content
#   the addressing of the XML document is detected
# - Response without Storage-Effects header, such a request has no effect
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/@attrF HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b1b050ab1fbc1f7db10110c89203a8e3");
});
%}

###
# No attributes can be set in the document.
# Therefore none is found and status 404 occurs.
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/@attrF HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b6ad023b0c52986f8b34e50d0c994b23");
});
%}

###
# PATCH can only set attributes that exist
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f44afe3f9ae8f26e77dbc9301bba58fe");
});
%}

###
# XPath as value is not supported
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PATCH {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9364f633e55d077d169a5d32f7d42a7a");
});
%}

###
# XPath with wrong function
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Unregistered function)
PATCH {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1502ff1e9b7033271b34d5262e62b641");
});
%}

###
# PATCH outside the root element, shall be ignored
# but PATCH can only set attributes that exist
# Expectations:
# - Status code 404 Resource Not Found
# - URI: //books/../@___xxx
PATCH {{service}}0x2f2f626f6f6b732f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5d3c3355098b9ee8533ef347a1d9cee9");
});
%}

###
# PATCH outside the root element, shall be ignored
# but PATCH can only set attributes that exist
# Expectations:
# - Status code 404 Resource Not Found
# - URI: /*/../@___xxx
PATCH {{service}}0x2f2a2f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "af5f79d09966eaed0566e4d4e9fc8ad2");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong/@new HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fab34679f3a2dbdb6901bb02b1c22f1f");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong/wrong/@new HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bcc115695ed74e28af9326ad05cfa50d");
});
%}

###

# Test sequence for storing XML structures into storage using pseudo elements.
# Pseudo elements serve as relative navigation to elements that are addressed
# by XPath: BEFORE AFTER FIRST LAST
# They are used to relativize the position of an element.

# PUT creates elements and attributes in storage and/or changes the value
# of existing ones.
# The position for the insert is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/books/book%5B1%5D::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<before id="beforeA"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4f58b0623081eef74086412d55a5dedd");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_put_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1d77a8f9b9fd3a1bb2febf42368f3584");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID-A 1x UID-M
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<book title="A2"/>
<book title="B2"/>
<book title="C2"/>
<book title="D2"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2a89501a2f31901b5964300028eda976");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-A 1x UID-M
# - before-elements are put in /books before first book (order A,B,C)
PUT {{service}}/books/book%5B1%5D::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<before id="beforeA"/>
<before id="beforeB"/>
<before id="beforeC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "700f4861a6b15a96053e9195fdbf6a2a");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-A 1x UID-M
# - after-elements are put in /books after last book (order A,B,C)
PUT {{service}}/books/book%5Blast()%5D::after HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<after id="afterA"/>
<after id="afterB"/>
<after id="afterC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "62f7393f0001872866dea2aab42961d9");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-A 1x UID-M
# - first-elements are put in /books as first elements before the existing (order A,B,C)
PUT {{service}}/books::first HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<first id="firstA"/>
<first id="firstB"/>
<first id="firstC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "67166796abed55910c0363d6ba34f200");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-A 1x UID-M
# - last-elements are put in /books as last elements after the existing (order A,B,C)
PUT {{service}}/books::last HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<last id="lastA"/>
<last id="lastB"/>
<last id="lastC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "738b7a41e2612d33a7f66e758c28a71e");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-A 1x UID-M
# - test are put in before all last elements
# - URI: (/books)//last::before
PUT {{service}}0x282f626f6f6b73292f2f6c6173743a3a6265666f7265 HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c411556355c8640fbed29b6605412682");
});
%}

###
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PUT {{service}}/books::wrong HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "00b9e619a16de90a4a3609514b5d4713");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
PUT {{service}}/books::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6e8ef42f8f3936b794c18b56c9f79f78");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
PUT {{service}}/books::after HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a523f9a7e01ae16af84a9b97587be5aa");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..::before
PUT {{service}}0x2f2a2f2e2e3a3a6265666f7265 HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9501b433234313f5c4e91405dc1403f8");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..::before
PUT {{service}}0x2f626f6f6b732f2e2e3a3a6265666f7265 HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a22dc6694b678e50a242dacfee830781");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b9902eeb0a2fcfb6b9110c4e61aa1e4d");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong/wrong::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "770dc3f5b26a55365fa19fc695a3b8bb");
});
%}

###
# Pseudo-element first for an empty element should work
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 2x UID (A/M)
# - URI: //*[@id='lastC']::first
PUT {{service}}0x2f2f2a5b4069643d276c61737443275d3a3a6669727374 HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bb01f66bb13ed0e90b5751297212efcc");
});
%}

###
# Preparation for the next test
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID-A, 20x UID-D, 1x UID-M
# - Storage-Revision is increased
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<book>
  <chapter title="Chapter-X-A">
    <text title="Text X4"/>
    <text title="Text X5"/>
    <text title="Text X6" ___uid="KIC2D3GJ1DWE:35" ___rev="5">
      Text
      <!-- Comment -->
      Text
      <a><b/></a>
      Text
      <c/>
      Text
    </text>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "21aa01dd37b83eaf2b15749339cababb");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - Storage: <fist/> after <text title="Text X6"> and before text
PUT {{service}}/books/book/chapter/text%5B3%5D::first HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<first/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8a67c2236e7ae2f0edd7a8b13e195a67");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - Storage: <last/> as last in <text title="Text X6">
PUT {{service}}/books/book/chapter/text%5B3%5D::last HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<last/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6bdb79eb0e5335f24513947d585fab67");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - Storage: <before/> directly before <a/>
PUT {{service}}/books/book/chapter/text%5B3%5D/a::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<before/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "94a77a390ce24d99e2267858534c8d73");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - Storage: <after/> directly after <a/>
PUT {{service}}/books/book/chapter/text%5B3%5D/a::after HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<after/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "413b2f38f6b4f0678cfd9cb636550648");
});
%}

###

# Test sequence for storing XML structures into storage using pseudo elements.
# Pseudo elements serve as relative navigation to elements that are addressed
# by XPath: BEFORE AFTER FIRST LAST
# They are used to relativize the position of an element. 

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/books/book%5B1%5D::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<before id="beforeA"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f56291f189e50c8133598c20a1505661");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_put_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f127c85bd245a7f423fbe47570cf4d7c");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 204 No Content
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<book title="A2"/>
<book title="B2"/>
<book title="C2"/>
<book title="D2"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5ebf7bc80f14bceec36cf050eaff357e");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID  
# - before-elements are put in /books before first book (order A,B,C)
PUT {{service}}/books/book%5B1%5D::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<before id="beforeA"/>
<before id="beforeB"/>
<before id="beforeC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e4eee7d7f3bce9b7c8ca3027f1d59b47");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID  
# - after-elements are put in /books after last book (order A,B,C)
PUT {{service}}/books/book%5Blast()%5D::after HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<after id="afterA"/>
<after id="afterB"/>
<after id="afterC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b077ea7f2308e28a863ec56b46b596b0");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID  
# - first-elements are put in /books as first elements before the existing (order A,B,C)
PUT {{service}}/books::first HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<first id="firstA"/>
<first id="firstB"/>
<first id="firstC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7f7ced1a18267dd4e72cd9fa3af50b70");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID  
# - last-elements are put in /books as last elements after the existing (order A,B,C)
PUT {{service}}/books::last HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<last id="lastA"/>
<last id="lastB"/>
<last id="lastC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d2ea03e4a22f5f995c47b8a55f371e71");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID  
# - test are put in before all last elements
# - URI: (/books)//last::before
PUT {{service}}0x282f626f6f6b73292f2f6c6173743a3a6265666f7265 HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8e3ebbd35827fd03e63d3a506500ce62");
});
%}

###
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PUT {{service}}/books::wrong HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0a2f1f003c0f40fd864fb394c98e3343");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
PUT {{service}}/books::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0da3df688a96094ae3b8bb4323e464ef");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
PUT {{service}}/books::after HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1f1ce96aeb80fad5236bdd52aea214ca");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - URI: /*/..::before
PUT {{service}}0x2f2a2f2e2e3a3a6265666f7265 HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9ed6ca66a37ac007b590b02be8e58332");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - URI: /books/..::before
PUT {{service}}0x2f626f6f6b732f2e2e3a3a6265666f7265 HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "410221d6aec78588854bc4d7a3032b4c");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7d5e6204fc4a8cd883cc784202b3735a");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong/wrong::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xslt+xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "69ab500840f66343178aaf9bdce32c90");
});
%}

###

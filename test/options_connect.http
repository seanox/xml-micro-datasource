# OPTIONS without path behaves like CONNECT, because CONNECT is no HTTP standard

# The following sequence is to test that requests to a storage with a custom
# root element, the storage and the name of the root element must be correctly
# specified in the request header.

###
# Header Storage is missing
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4282e1ce32e924654d9c8e974826630d");
});
%}

###
# Header Storage is empty
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage:

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4282e1ce32e924654d9c8e974826630d");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage: O________10________20________30________40________50________60____

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f79158ddc7f9059943ccadb85ab25ea6");
});
%}

###
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: O________10________20________30________40________50________60___

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4232b00991c11ad996b9869f20baf91a");
});
%}

###
# The storage identifier with the max. length
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: O________10________20________30________40________50________60__A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "941cd800e4f91bf1dec848f46f863515");
});
%}

###
# The storage identifier is case-insensitive
# Expectations:
# - Status code 202 Accepted
OPTIONS {{service}} HTTP/1.0
Storage: O________10________20________30________40________50________60__A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d780d72b8b3693c8dd09a433956d22b2");
});
%}

###
# The storage identifier is case-insensitive
# Expectations:
# - Status code 202 Accepted
OPTIONS {{service}} HTTP/1.0
Storage: O________10________20________30________40________50________60__a

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "940fbf0de26df46ce85c66f8f631e8e2");
});
%}

###
# The storage identifier with the min. length
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: O

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "48b9a7ee8bf1754006b7dc590765b052");
});
%}

###
# The storage identifier with with invalid character(s)
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage: ?

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5213d19557d723e7e8846fcef21a1045");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage: 000000000000000000000000000000000-OC

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "251cb8a0b97c02f67a148ef23ae017ff");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be created.
# Expectations:
# - Status code 201 Resource Created
# - Connection-Unique: UID
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f96dd3e5eb5e95d46bc1658bc5e03ed1");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be shared.
# Expectations:
# - Status code 202 Accepted
# - Connection-Unique: UID
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8a54a76dc2ea987ba5bb497269ebc8cc");
});
%}

###
# Name of the root element is not correct.
# Expectations:
# - Status code 404 Resource Not Found
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}} bookS

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "db4a6aa1c764563f5bade9b816b81864");
});
%}

###
# Storage header is not correct.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}} books x

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3baed17298ef5cd0d42370236df09eb1");
});
%}

###
# Name of the root element is not correct.
# Without specification the default 'data' is used.
#   Storage header corresponds to: 
# Storage: 0000000000000000000000000000000000OC data 
# Expectations:
# - Status code 404 Resource Not Found
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1b9ab4c797f396ae3d96e3cf000d4b65");
});
%}

###

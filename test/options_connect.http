# OPTIONS without path behaves like CONNECT, because CONNECT is no HTTP standard

# The following sequence is to test that requests to a storage with a custom
# root element, the storage and the name of the root element must be correctly
# specified in the request header.

###
# Header Storage is missing
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5690f14b40156593c2a2f9390e776d85");
});
%}

###
# Header Storage is empty
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage:

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5690f14b40156593c2a2f9390e776d85");
});
%}

###
# Header Storage is to short/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage: 0000000000000000000000000000000000O

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "dfd8ee74b3a478144ea46f11dc047c84");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage: 0000000000000000000000000000000000OCX

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "83ebaac539bd12b3fe06c30976d50982");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage: 000000000000000000000000000000000-OC

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9f4705b9bf5b88d1e48ec99d2038c402");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be created.
# Expectations:
# - Status code 201 Resource Created
# - Connection-Unique: UID
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "46043ef6fd041ba4237e4a6c8ac7fc41");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be shared.
# Expectations:
# - Status code 202 Accepted
# - Connection-Unique: UID
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f4b2d6bbf502a4165ba125771608124a");
});
%}

###
# Name of the root element is not correct.
# Expectations:
# - Status code 404 Resource Not Found
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}} bookS

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "804a8541def358dab69125bfbf63ff94");
});
%}

###
# Storage header is not correct.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}} books x

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "742796e056c31e995b1f4501155aef0b");
});
%}

###
# Name of the root element is not correct.
# Without specification the default 'data' is used.
#   Storage header corresponds to: 
# Storage: 0000000000000000000000000000000000OC data 
# Expectations:
# - Status code 404 Resource Not Found
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bf5cfa7b9500e0e742024cd31af482e1");
});
%}

###

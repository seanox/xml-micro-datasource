# OPTIONS without path behaves like CONNECT, because CONNECT is no HTTP standard

# The following sequence is to test that requests to a storage with a custom
# root element, the storage and the name of the root element must be correctly
# specified in the request header.

###
# Header Storage is missing
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "65fd1d9fabd6b13645a24861b299d4b3");
});
%}

###
# Header Storage is empty
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage:

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "65fd1d9fabd6b13645a24861b299d4b3");
});
%}

###
# Header Storage is to short/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage: 0000000000000000000000000000000000O

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "72e96e3cc2b49a354a2c0c3865ecafc7");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage: 0000000000000000000000000000000000OCX

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0e2da76c213e7cfb3a7cc7393d5fad13");
});
%}

###
# Header Storage is to long/invalid
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage: 000000000000000000000000000000000-OC

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "75e522d81dfe1835d7f4aea77b40f9c7");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be created.
# Expectations:
# - Status code 201 Resource Created
# - Connection-Unique: UID
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e1d5d93f105efe6e61c8cec311967908");
});
%}

###
# Everything is correct, storage and name of the root element are transmitted
# correctly, the storage can be shared.
# Expectations:
# - Status code 202 Accepted
# - Connection-Unique: UID
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}} books

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "297793d1a91b249d7fd7ceed732cbe68");
});
%}

###
# Name of the root element is not correct.
# Expectations:
# - Status code 404 Resource Not Found
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}} bookS

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a7d1b780e173cf6a008614939db910c8");
});
%}

###
# Storage header is not correct.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid storage identifier
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}} books x

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "97d29c3d18323c70e6c02d2153b5a613");
});
%}

###
# Name of the root element is not correct.
# Without specification the default 'data' is used.
#   Storage header corresponds to: 
# Storage: 0000000000000000000000000000000000OC data 
# Expectations:
# - Status code 404 Resource Not Found
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options_connect}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3603fa9d4c7a6ba46fcaf7ba9db41c01");
});
%}

###

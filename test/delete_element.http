# Test sequence for deleting of elements in the storage.
# TODO:

###
# Storage is not establish
# Round brackets in XPath should not be a problem.
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}(/books/book%5B1%5D)/chapter%5B1%5D/text%5B1%5D HTTP/1.0
Storage: {{storage_delete_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "480b1946273219edc6e7cbca6edd4a8c");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_delete_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2b39844617fc023e0ee78490aae2938c");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_delete_element}}
Content-Type: application/xslt+xml

<book title="Book-A" a="A" b="A" c="A" d="A">
  <chapter title="Chapter-A-A">
    <text title="Text A1"/>
    <text title="Text A2"/>
    <text title="Text A3"/>
  </chapter>
  <chapter title="Chapter-B">
    <text title="Text A4"/>
    <text title="Text A5"/>
    <text title="Text A6"/>
  </chapter>
</book>
<book title="Book-B" a="B" b="B" c="B" d="B">
  <chapter title="Chapter-B-A">
    <text title="Text B1"/>
    <text title="Text B2"/>
    <text title="Text B3"/>
  </chapter>
  <chapter title="Chapter-B-B">
    <text title="Text B4"/>
    <text title="Text B5"/>
    <text title="Text B6"/>
  </chapter>
</book>
<book title="Book-C" a="C" b="C" c="C" d="C">
  <chapter title="Chapter-C-A">
    <text title="Text C1"/>
    <text title="Text C2"/>
    <text title="Text C3"/>
  </chapter>
  <chapter title="Chapter-C-B">
    <text title="Text C4"/>
    <text title="Text C5"/>
    <text title="Text C6"/>
  </chapter>
</book>
<book title="Book-D" a="D" b="D" c="D" d="D">
  <chapter title="Chapter-D-A">
    <text title="Text D1"/>
    <text title="Text D2"/>
    <text title="Text D3"/>
  </chapter>
  <chapter title="Chapter-D-B">
    <text title="Text D4"/>
    <text title="Text D5"/>
    <text title="Text D6"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5333138273d817a279f54651517519b8");
});
%}

###
# Invalid XPath /books/book[1]x
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
DELETE {{service}}(/books/book%5B1%5D)/chapter%5B1%5D/text%5B1%5Dx HTTP/1.0
Storage: {{storage_delete_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5c705134ce3d9db38e92c7651950a41b");
});
%}

###
# Deleting an element must work
# The indirectly deleted UIDs must be contained in Storage-Effects
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID-D, 1x UID-M
# - Storage-Revision is increased
DELETE {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_delete_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bded5d4c83fcf6c8feda4e1987a43a31");
});
%}

###
# Deleting an element must work
# The indirectly deleted UIDs must be contained in Storage-Effects
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID-D, 1x UID-M
# - Storage-Revision is increased
DELETE {{service}}/books/book%5B@title='Book-B'%5D HTTP/1.0
Storage: {{storage_delete_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "736146c664e61cf7257abf7d658c6635");
});
%}

###
# The Book-B is deleted and cannot be deleted again
# The indirectly deleted UIDs must be contained in Storage-Effects
# Expectations:
# - Status code 404 Resource Not Found
# - Storage-Revision is not increased
DELETE {{service}}/books/book%5B@title='Book-B'%5D HTTP/1.0
Storage: {{storage_delete_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8e0a3975b3645c8cf9d0550ce51b5c32");
});
%}

###
# DELETE outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..
DELETE {{service}}0x2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_delete_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2068824d5a41623b82f3bffc63687e86");
});
%}

###
#  XPath functions are not supported
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
DELETE {{service}}name(.) HTTP/1.0
Storage: {{storage_delete_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8b7bdfc64a46b24b46a514e212c86115");
});
%}

###
# Root element can be deleted,
# but is automatically recreated with a new UID and incremented revision.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 19x UID-D, 1x UID-A
# - Storage-Revision is increased
DELETE {{service}}/books HTTP/1.0
Storage: {{storage_delete_element}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3d0dc2adc376feb9336eac714f077394");
});
%}

###

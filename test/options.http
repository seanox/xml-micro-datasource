# Test sequence for OPTIONS requests

# OPTIONS is used to request the functions to an XPath, which is responded
# with the Allow header.
# This method distinguishes between XPath axis and XPath function and uses
# different Allow headers. Also the existence of the target on an XPath
# axis has an influence on the response. The method will not use status
# 404 in relation to non-existing targets, but will offer the methods
# CONNECT, OPTIONS, PUT via Allow-Header.
# If the XPath is a function, it is executed and thus validated, but
# without returning the result.
# The XPath processing is strict and does not accept unnecessary spaces.
# Faulty XPath will cause the status 400.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
OPTIONS {{service}}/books HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ce45d35e5927332972ac2ada46f83e9a");
});
%}

###
# CORS preflight OPTIONS
# Expectations:
# - Status code 200 Success
# - Access-Control-Allow-Origin: *
# - Access-Control-Allow-Credentials: true
# - Access-Control-Max-Age: 86400
OPTIONS {{service}} HTTP/1.0
Origin: {{origin}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5d11a93555860ffafb883d603c34e187");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e8d5925cba99e2f9d619a6b74dedb9d0");
});
%}

###
# Initial request to establish an existing storage
# Expectations:
# - Status code 202 Accepted
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4933fbdee36a971b5efb08517292a74a");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 39x UID-A 1x UID-M
PUT {{service}}/books HTTP/1.0
Storage: {{storage_options}}
Content-Type: application/xslt+xml

<book title="A1">
  <chapter title="Chapter A1-1">
    <paragraph title="Paragraph A1-1-1"/>
    <paragraph title="Paragraph A1-1-2"/>
    <paragraph title="Paragraph A1-1-3"/>
  </chapter>
  <chapter title="Chapter A1-2">
    <paragraph title="Paragraph A1-2-1"/>
    <paragraph title="Paragraph A1-2-2"/>
    <paragraph title="Paragraph A1-2-3"/>
  </chapter>
  <chapter title="Chapter A1-3">
    <paragraph title="Paragraph A1-3-1"/>
    <paragraph title="Paragraph A1-3-2"/>
    <paragraph title="Paragraph A1-3-3"/>
  </chapter>
</book>
<book title="B1">
  <chapter title="Chapter B1-1">
    <paragraph title="Paragraph B1-1-1"/>
    <paragraph title="Paragraph B1-1-2"/>
    <paragraph title="Paragraph B1-1-3"/>
  </chapter>
  <chapter title="Chapter B1-2">
    <paragraph title="Paragraph B1-2-1"/>
    <paragraph title="Paragraph B1-2-2"/>
    <paragraph title="Paragraph B1-2-3"/>
  </chapter>
  <chapter title="Chapter B1-3">
    <paragraph title="Paragraph B1-3-1"/>
    <paragraph title="Paragraph B1-3-2"/>
    <paragraph title="Paragraph B1-3-3"/>
  </chapter>
</book>
<book title="C1">
  <chapter title="Chapter C1-1">
    <paragraph title="Paragraph C1-1-1"/>
    <paragraph title="Paragraph C1-1-2"/>
    <paragraph title="Paragraph C1-1-3"/>
  </chapter>
  <chapter title="Chapter C1-2">
    <paragraph title="Paragraph C1-2-1"/>
    <paragraph title="Paragraph C1-2-2"/>
    <paragraph title="Paragraph C1-2-3"/>
  </chapter>
  <chapter title="Chapter C1-3">
    <paragraph title="Paragraph C1-3-1"/>
    <paragraph title="Paragraph C1-3-2"/>
    <paragraph title="Paragraph C1-3-3"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "014304286dc56f0a8408091383d31225");
});
%}

###
# XPath axis addresses the document and thus has a usable target
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects header
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
# - URI: /
OPTIONS {{service}}0x2f HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e69ad499c47f892dc70eca53221263e4");
});
%}

###
# XPath axis without usable target
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
# - URI: //
OPTIONS {{service}}0x2f2f HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "109dd8ba69f5e725beca56022d572bb0");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}}/books HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2c5d074364ed5fffa39c495c8bc30205");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
# - URI: (/books)//chapter
OPTIONS {{service}}0x282f626f6f6b73292f2f63686170746572 HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2671768d4655e6b3f9dbcb7fb0ade7b7");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 27x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
# - URI: (/books)//paragraph
OPTIONS {{service}}0x282f626f6f6b73292f2f706172616772617068 HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "aee8b1fbadf713a95cc8ea47e7090393");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}}/books/book HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3c97417138ca77b3dc098af1cdbd9e2a");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects header
# - Allow: CONNECT, OPTIONS, PUT
OPTIONS {{service}}/books/book/new/new HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "86badb84ee1f7fba45920f01c77336b2");
});
%}

###
# XPath function has no effects
# Expectations:
# - Status code 204 No Content
# - Allow: CONNECT, OPTIONS, GET, POST
OPTIONS {{service}}name(/books) HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6f5ef461f03ec72be9afc03c9dd2d2dc");
});
%}

###
# Wrong XPath function has no effects
# Because XPath functions are not evaluated or validated via OPTIPONS.
# The request checks more whether it can be processed.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath function (Unregistered function)
OPTIONS {{service}}wrong(/books) HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1220330a721b8d180185621926dec6d6");
});
%}

###
# XPath axis with a target attribute
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}}/books/book%5B1%5D/@title HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "439338d3c394938702e9fd7666394269");
});
%}

###
# XPath axis without a target attribute
# Expectations:
# - Status code 204 No Content
# - Allow: CONNECT, OPTIONS, PUT
OPTIONS {{service}}/books/book%5B1%5D/@titlex HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3e194cc7080aa6a8da3d5751ca3a0ea5");
});
%}

###
# Invalid XPath /books/book[1]x
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
OPTIONS {{service}}/books/book%5B1%5Dx HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "edb15e9cb76a4dbfd6ba587419da441c");
});
%}

###

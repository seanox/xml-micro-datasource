# Test sequence for OPTIONS requests

# OPTIONS is used to request the functions to an XPath, which is responded
# with the Allow header.
# This method distinguishes between XPath axis and XPath function and uses
# different Allow headers. Also the existence of the target on an XPath
# axis has an influence on the response. The method will not use status
# 404 in relation to non-existing targets, but will offer the methods
# CONNECT, OPTIONS, PUT via Allow-Header.
# If the XPath is a function, it is executed and thus validated, but
# without returning the result.
# The XPath processing is strict and does not accept unnecessary spaces.
# Faulty XPath will cause the status 400.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
OPTIONS {{service}}/books HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "efa97d75f9001c516fba674fa3b59a31");
});
%}

###
# CORS preflight OPTIONS
# Expectations:
# - Status code 200 Success
# - Access-Control-Allow-Origin: *
# - Access-Control-Allow-Credentials: true
# - Access-Control-Max-Age: 86400
OPTIONS {{service}} HTTP/1.0
Origin: {{origin}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "64e3ceb00232cca9112320265ddf8563");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "10b95b7fe33b5c52066ee170e1bd222d");
});
%}

###
# Initial request to establish an existing storage
# Expectations:
# - Status code 202 Accepted
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "33d3e9c0dee5e234a8a9ae5260281786");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 39x UID-A 1x UID-M
PUT {{service}}/books HTTP/1.0
Storage: {{storage_options}}
Content-Type: application/xslt+xml

<book title="A1">
  <chapter title="Chapter A1-1">
    <paragraph title="Paragraph A1-1-1"/>
    <paragraph title="Paragraph A1-1-2"/>
    <paragraph title="Paragraph A1-1-3"/>
  </chapter>
  <chapter title="Chapter A1-2">
    <paragraph title="Paragraph A1-2-1"/>
    <paragraph title="Paragraph A1-2-2"/>
    <paragraph title="Paragraph A1-2-3"/>
  </chapter>
  <chapter title="Chapter A1-3">
    <paragraph title="Paragraph A1-3-1"/>
    <paragraph title="Paragraph A1-3-2"/>
    <paragraph title="Paragraph A1-3-3"/>
  </chapter>
</book>
<book title="B1">
  <chapter title="Chapter B1-1">
    <paragraph title="Paragraph B1-1-1"/>
    <paragraph title="Paragraph B1-1-2"/>
    <paragraph title="Paragraph B1-1-3"/>
  </chapter>
  <chapter title="Chapter B1-2">
    <paragraph title="Paragraph B1-2-1"/>
    <paragraph title="Paragraph B1-2-2"/>
    <paragraph title="Paragraph B1-2-3"/>
  </chapter>
  <chapter title="Chapter B1-3">
    <paragraph title="Paragraph B1-3-1"/>
    <paragraph title="Paragraph B1-3-2"/>
    <paragraph title="Paragraph B1-3-3"/>
  </chapter>
</book>
<book title="C1">
  <chapter title="Chapter C1-1">
    <paragraph title="Paragraph C1-1-1"/>
    <paragraph title="Paragraph C1-1-2"/>
    <paragraph title="Paragraph C1-1-3"/>
  </chapter>
  <chapter title="Chapter C1-2">
    <paragraph title="Paragraph C1-2-1"/>
    <paragraph title="Paragraph C1-2-2"/>
    <paragraph title="Paragraph C1-2-3"/>
  </chapter>
  <chapter title="Chapter C1-3">
    <paragraph title="Paragraph C1-3-1"/>
    <paragraph title="Paragraph C1-3-2"/>
    <paragraph title="Paragraph C1-3-3"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f71e986f492659e267ecb9e7b9609167");
});
%}

###
# XPath axis addresses the document and thus has a usable target
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects header
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
# - URI: /
OPTIONS {{service}}0x2f HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2decbc503604b1d2192fca54da54c93d");
});
%}

###
# XPath axis without usable target
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
# - URI: //
OPTIONS {{service}}0x2f2f HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d3b3797d397f8337a5daf33de7835f9e");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}}/books HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "247fd01382e2b170d21f705c1dc2bd57");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
# - URI: (/books)//chapter
OPTIONS {{service}}0x282f626f6f6b73292f2f63686170746572 HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c81698324f5022ff447c1b1da9494445");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 27x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
# - URI: (/books)//paragraph
OPTIONS {{service}}0x282f626f6f6b73292f2f706172616772617068 HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e76c46318047c772002cb0dd27d2eb6b");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}}/books/book HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4dc60ea2198e2db7f4e197d3dc0cce33");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects header
# - Allow: CONNECT, OPTIONS, PUT
OPTIONS {{service}}/books/book/new/new HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "eabab99fd0dbb9533c58ba8ca9ea4d59");
});
%}

###
# XPath function has no effects
# Expectations:
# - Status code 204 No Content
# - Allow: CONNECT, OPTIONS, GET, POST
OPTIONS {{service}}name(/books) HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7c7efa8f1abf83c9fc1f5ea2f9f5e13e");
});
%}

###
# Wrong XPath function has no effects
# Because XPath functions are not evaluated or validated via OPTIPONS.
# The request checks more whether it can be processed.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath function (Unregistered function)
OPTIONS {{service}}wrong(/books) HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7c17e2a05e3d7c434b5a0c9d0238e880");
});
%}

###
# XPath axis with a target attribute
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}}/books/book%5B1%5D/@title HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "422174dab01fd5f71f208ec42c73a369");
});
%}

###
# XPath axis without a target attribute
# Expectations:
# - Status code 204 No Content
# - Allow: CONNECT, OPTIONS, PUT
OPTIONS {{service}}/books/book%5B1%5D/@titlex HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ac5fced9e7b6b9e69beacad6d7f31f16");
});
%}

###
# Invalid XPath /books/book[1]x
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
OPTIONS {{service}}/books/book%5B1%5Dx HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a036fde1dbfb38c0f2c432986e59ecad");
});
%}

###

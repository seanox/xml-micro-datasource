# Test sequence for putting text into elements of the storage.
# PUT inserts new elements and attributes into the storage.
# The position for the insert is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7aca0c1fcd1790aabeac9e9d1df891b2");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_put_text}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ab25abe0a4244226c93adbe75e3b9d91");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6f00f022d6afe9648fcafbbf45fabc74");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID-A 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: application/xslt+xml

<book title="A2">
  <comment></comment>
</book>
<book title="B2">
  <comment></comment>
</book>
<book title="C2">
  <comment></comment>
</book>
<book title="D2">
  <comment></comment>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fc947ad2a4d07d544e362658fff248e9");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PUT {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Text A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d401908b1a5cc155a903d198bc034f83");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PUT {{service}}(/books/book)/comment HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Text B

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e3354c4caead5358296c11dd32ebce55");
});
%}

###
# Using unicode should not cause problems.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with encoded text and without further elements
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "602323ec33c2edd6e6a142716e0b5362");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with books as text and without further elements
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

name(/*)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "77d2b1940c5ee86604bc021c1d9feaf7");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Invalid expression)
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e111785e5e0dfc4b474d3211bef94532");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Unregistered function)
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5466749b74e3733ef179cf5e4432ccd2");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fa1108d5be087e3b05bf5367a37ac5d3");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

.

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "79bf97dade748ad447af7a3a1f6da4e5");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..
PUT {{service}}0x2f2a2f2e2e HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9042e64606df4b7c699997599710ad40");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..
PUT {{service}}0x2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ee7c5836d33b44ad302fa57b5621af58");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "86b6c0d1e2b69c3aa761060e9bef7844");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong/wrong HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d92916f87b85a5d38ed2779b5f5d9988");
});
%}

###
# Overwriting an element must work
# The indirectly deleted UIDs must be contained in Storage-Effect
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 10x UID-A, 1x UID-M
# - Storage-Revision is increased
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6" ___uid="KIC2D3GJ1DWE:35" ___rev="5">
    Text
    <!-- Comment -->
    Text
    <a><b></b></a>
  </text>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "444667485ee94654a1b7d8fd8e4ce57a");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage: text title="Text X6" includes only "test", comments and text were deleted
PUT {{service}}/books/chapter%5B2%5D/text%5B3%5D HTTP/1.0
Storage: {{storage_put_text}}
Accept-Effects: ALL
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d3b787f5cf504f25587f73505b9c9b69");
});
%}

###

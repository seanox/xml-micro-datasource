# Test sequence for putting text into elements of the storage.

# PUT creates elements and attributes in storage and/or changes the value
# of existing ones.
# The position for the insert is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "af558f5148555c54a76bd43fc6374121");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_put_text}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5d30573679aad6fed70f11c08c3a45f3");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6ecfd764c77df6398a8ff5cb8a4d6118");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID-A 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: application/xslt+xml

<book title="A2">
  <comment></comment>
</book>
<book title="B2">
  <comment></comment>
</book>
<book title="C2">
  <comment></comment>
</book>
<book title="D2">
  <comment></comment>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "32f7bb0bc64b922ae6c599f4c21f2013");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PUT {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Text A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d5f3bfa82009d907efaddfaf1951e593");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PUT {{service}}(/books/book)/comment HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Text B

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "913697c6325964725e251add2b959a93");
});
%}

###
# Using unicode should not cause problems.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with encoded text and without further elements
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c1af43a3d0055831ba75a703803162c2");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with books as text and without further elements
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

name(/*)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "cf636d423c4c4f0739aa33be192ca7b1");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Invalid expression)
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f5ad118e870abff80f22964ffa9f61b9");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Unregistered function)
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ff8a190d66d407513454dea5b2e068d8");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e5d089006a2e2bd24da1dd9ab7f13329");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

.

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "78487cc511f70956198a510dcbde3023");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..
PUT {{service}}0x2f2a2f2e2e HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a8f7257054191192cffbc123c7af6061");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..
PUT {{service}}0x2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "af301e015f8d3e664fc6f47e10d69e4e");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d3b169f2117991a5a4d78f6553a919c5");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong/wrong HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "611416d4c36dd9c4df06019391b4101f");
});
%}

###
# Preparation for the next test
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 10x UID-A, 1x UID-M
# - Storage-Revision is increased
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6" ___uid="KIC2D3GJ1DWE:35" ___rev="5">
    Text
    <!-- Comment -->
    Text
    <a><b></b></a>
  </text>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "effb14a97f9f93162c54c11641a52c06");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage: text title="Text X6" includes only "test", comments and text were deleted
PUT {{service}}/books/chapter%5B2%5D/text%5B3%5D HTTP/1.0
Storage: {{storage_put_text}}
Accept-Effects: ALL
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "21ee80f082a49c00a83c200f92343ba6");
});
%}

###

# Test sequence for putting text into elements of the storage.

# PUT creates elements and attributes in storage and/or changes the value
# of existing ones.
# The position for the insert is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "67d4949e4eb0fb924251501e77998f61");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_put_text}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0f6f78b445cd143bb00fd971f1e7af12");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b5e92eee38e9eb23f2a1bdcddad95b67");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID-A 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: application/xslt+xml

<book title="A2">
  <comment></comment>
</book>
<book title="B2">
  <comment></comment>
</book>
<book title="C2">
  <comment></comment>
</book>
<book title="D2">
  <comment></comment>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a2c46897d45fcce1c253c2462b353898");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PUT {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Text A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "089c422c55e7b2818f1d648f7a5d0c77");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PUT {{service}}(/books/book)/comment HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Text B

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b6aa37ee688161532f6679d120018135");
});
%}

###
# Using unicode should not cause problems.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with encoded text and without further elements
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4fff7a3a1b38631afb5eff29297b2f75");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with books as text and without further elements
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

name(/*)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9f9cb1a43c069eec84563008da0a694e");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Invalid expression)
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a7a5547101f3d6c5eb0ab7313d3c55cf");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Unregistered function)
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5b24ef502055c2f51accb55c55f02a1e");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "15e268baedf97219077006cd8faae49e");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/xpath

.

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a92b8966b160851149e599ffcdc98614");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..
PUT {{service}}0x2f2a2f2e2e HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bfd77e2b479501b14c73da8792e5f2d2");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..
PUT {{service}}0x2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c573f75efeac4a7a034d607226afc2d4");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3430fb9ee92ad02a2d1e24807cdfcd62");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong/wrong HTTP/1.0
Storage: {{storage_put_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3bea93f883316dc9dd5d439c0c7df2c4");
});
%}

###
# Preparation for the next test
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 10x UID-A, 1x UID-M
# - Storage-Revision is increased
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_text}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6" ___uid="KIC2D3GJ1DWE:35" ___rev="5">
    Text
    <!-- Comment -->
    Text
    <a><b></b></a>
  </text>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fb2471e70c9126ec2209944b63b8043e");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - Storage-Revision is increased
# - Storage: text title="Text X6" includes only "test", comments and text were deleted
PUT {{service}}/books/chapter%5B2%5D/text%5B3%5D HTTP/1.0
Storage: {{storage_put_text}}
Accept-Effects: ALL
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "cb085de30e1ce68bc06d6f77abd7b876");
});
%}

###

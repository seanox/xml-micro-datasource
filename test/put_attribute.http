# Test sequence for putting of attributes to storage elements.
# PUT inserts new elements and attributes into the storage.
# The position for the insert is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4be4d47d14c74b1c88f733d1ab0d9df6");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_put_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "801d692f0b376fec2fa2fa15ea1b49bb");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7fca5e586511786da8456c18ae5cc866");
});
%}

###
# Using unicode should not cause problems
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Double quotation marks and the & are encoded correctly
# - Unicode characters are inserted as UTF-8
# - Storage-Effects: 1x UID
PUT {{service}}(/books)/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8533ab209f99887a217216c5bdaca821");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
# - Double quotation marks and the & are encoded correctly
# - As value books is used
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

concat(name(/*), "-Test")

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c00d3c844ae261b8ad7806716e2b880d");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Invalid expression)
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9a115bf06878400b50b613c8bc654fc5");
});
%}

###
# Using Unicode should not cause problems.
# Here the XML file of the storage is parsed again, which must also work with
# the previously inserted unicode.
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "781f30f1e45f3905b85fdb981c27502a");
});
%}

###
# Expectations:
# - Status code 415 Unsupported Media Type
#   because the Content-Type is not text/plain.
PUT {{service}}/books/@attrG HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain-x

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "dafef35c5d42cfc4159b0a1d0c4fb248");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
PUT {{service}}/books/@attrD HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ddead25190d4250371c7093c7ba627c5");
});
%}

###
# Expectations:
# - Status code 415 Unsupported Media Type
#   because the Content-Type is not text/plain.
PUT {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain-x

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9c5c79484974db51f8a844c9923cfbe0");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___rev is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/books/@___rev HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "900e6389a2e43b702386daf9cbae520f");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___uid is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/books/@___uid HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0d4f0e700c34681d0e92eadab440be8b");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   the addressing of the XML document is detected
# - Response without Storage-Effects header, such a request has no effect
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/@attrF HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2d72899c3f669eebe88f18064cafc0ac");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   the addressing of the XML document is detected
# - Response without Storage-Effects header, such a request has no effect
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/@attrF HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

name(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "00653f7f88b8dcf2c6d71c6b3179fcc0");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
PUT {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

name(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1e813322735506755996141790d042c9");
});
%}

###
# XPath as value is not supported
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PUT {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bbdabc32c65bdeef159e96a882881eb7");
});
%}

###
# XPath with wrong function
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Unregistered function)
PUT {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "28fae7d9cff04d8b1dd19ea0609e894f");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
#   the addressing of the XML document is detected
# - Response without Storage-Effects header, such a request has no effect
# - Storage-Revision is not increased
# - Storage-Expiration is extended
# - URI: //books/../@___xxx
PUT {{service}}0x2f2f626f6f6b732f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "950730c5592fa6c54d13c79e936a3810");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
#   the addressing of a the XML document is detected
# - Response without Storage-Effects header, such a request has no effect
# - Storage-Revision is not increased
# - Storage-Expiration is extended
# - URI: /*/../@___xxx
PUT {{service}}0x2f2a2f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "164a657033a26371e69b53a5dd209ffe");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong/@new HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6dd114d0f0193caeb717131510d0a18e");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong/wrong/@new HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c82ad3dcb0252ba6f1f423e684337d5b");
});
%}

###
# TODO: not supported test case
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Content-Length is mssing but without effect
#PUT {{service}}/books/@attrB HTTP/1.0
#Storage: {{storage_put_attribute}}
#Content-Type: text/plain
#
#test_value<2>
#
#> {%
#client.test("unittest", function() {
#    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "XXXX");
#});
#%}

###
# TODO: not supported test case
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Content-Length is wrong but ignored
#PUT {{service}}/books/@attrC HTTP/1.0
#Storage: {{storage_put_attribute}}
#Content-Type: text/plain
#Content-Length: 5
#
#123456789ABCDEF
#
#> {%
#client.test("unittest", function() {
#    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "XXXX");
#});
#%}

###

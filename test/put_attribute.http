# Test sequence for putting of attributes to storage elements.

# PUT creates elements and attributes in storage and/or changes the value
# of existing ones.
# The position for the insert is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f822c688ec948015206e7d8b552f1ebd");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_put_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3c0a27ec16aaaae75c2e9e5f672a06af");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID-M
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0e82b6091dd7b0715e4f791fb4ceb5a7");
});
%}

###
# Using unicode should not cause problems
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Double quotation marks and the & are encoded correctly
# - Unicode characters are inserted as UTF-8
# - Storage-Effects: 1x UID-M
PUT {{service}}(/books)/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "915e0e3f65a508ca2304396837ebed21");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID-M
# - Double quotation marks and the & are encoded correctly
# - As value books is used
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

concat(name(/*), "-Test")

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f571b3653acb59f8a4c4c19218989847");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Invalid expression)
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bd29b299b5e89c94388aae768cb1d6d8");
});
%}

###
# Using Unicode should not cause problems.
# Here the XML file of the storage is parsed again, which must also work with
# the previously inserted unicode.
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Effects: 1x UID-M
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3a1e4c543019305b659320479e8e8a23");
});
%}

###
# Expectations:
# - Status code 415 Unsupported Media Type
#   because the Content-Type is not text/plain.
PUT {{service}}/books/@attrG HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain-x

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0912e47fd92c079590c98c56e518117c");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
PUT {{service}}/books/@attrD HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "23934e582c785ec54afb197ed5d414ff");
});
%}

###
# Expectations:
# - Status code 415 Unsupported Media Type
#   because the Content-Type is not text/plain.
PUT {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain-x

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4b6959cf5e27ec0017d178ccb5095c3b");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___rev is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/books/@___rev HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c6ccee078b6501c9251c632553eb11b9");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___uid is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/books/@___uid HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "617e5ebf5c837b77542ebcfd0db523ce");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   the addressing of the XML document is detected
# - Response without Storage-Effects header, such a request has no effect
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/@attrF HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9efb41166f9e02e135dc215e673c0f5f");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   the addressing of the XML document is detected
# - Response without Storage-Effects header, such a request has no effect
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/@attrF HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

name(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fc081464fdce32dffd804c62fc9af7a1");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
PUT {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

name(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "58ba3a1201727d4fc57319ad233d931e");
});
%}

###
# XPath as value is not supported
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PUT {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "127a7c923aa837c17392c456f4ae2473");
});
%}

###
# XPath with wrong function
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Unregistered function)
PUT {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "dba52015158dbbbed6a4f0e63268b6fb");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
#   the addressing of the XML document is detected
# - Response without Storage-Effects header, such a request has no effect
# - Storage-Revision is not increased
# - Storage-Expiration is extended
# - URI: //books/../@___xxx
PUT {{service}}0x2f2f626f6f6b732f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9d1b7c56c20cef0683b7e1823c30ae15");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
#   the addressing of a the XML document is detected
# - Response without Storage-Effects header, such a request has no effect
# - Storage-Revision is not increased
# - Storage-Expiration is extended
# - URI: /*/../@___xxx
PUT {{service}}0x2f2a2f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "eff9b8301731d0c2a71d58fb7af42615");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong/@new HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7a603b095fd668cf8603a6cb669216c1");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong/wrong/@new HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e0669fd0ffd6c306d75d990bbb3ea579");
});
%}

###
# TODO: not supported test case
# The JetBrains HTTP client automatically adds the Content-Length header to the
# requestand the request should be tested without the Content-Length header.
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Content-Length is mssing but without effect
#PUT {{service}}/books/@attrB HTTP/1.0
#Storage: {{storage_put_attribute}}
#Content-Type: text/plain
#
#test_value<2>
#
#> {%
#client.test("unittest", function() {
#    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "XXXX");
#});
#%}

###
# TODO: not supported test case
# The JetBrains HTTP client automatically adds the Content-Length header to the
# requestand the request should be tested with a wrong Content-Length header.
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Content-Length is wrong but ignored
#PUT {{service}}/books/@attrC HTTP/1.0
#Storage: {{storage_put_attribute}}
#Content-Type: text/plain
#Content-Length: 5
#
#123456789ABCDEF
#
#> {%
#client.test("unittest", function() {
#    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "XXXX");
#});
#%}

###

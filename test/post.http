# Test sequence for POST requests.

# POST queries data about XPath axes and functions via transformation.
# For this, an XSLT stylesheet is sent with the request-body, which is
# then applied by the XSLT processor to the data in storage.
# Thus the content type application/xslt+xml is always required.
# The client defines the content type for the output with the output-tag
# and the method-attribute.
# The XPath is optional for this method and is used to limit and preselect
# the data. The processing is strict and does not accept unnecessary
# spaces.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6cb4fd7c9bd981b9b5a0e1afa1a94603");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_post}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "14fc73894d010593cd58d9f48897c411");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: with a lot of UIDs 
PUT {{service}}/statistic HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<cities>
  <city name="Berlin">
    <districts>
      <district name="Charlottenburg-Wilmersdorf">
        <quarters>
          <quarter name="Charlottenburg" area="10.6" inhabitants="130663" population="12327"/>
          <quarter name="Charlottenburg-Nord" area="6.2" inhabitants="19597" population="3161"/>
          <quarter name="Grunewald" area="22.3" inhabitants="10999" population="493.2"/>
          <quarter name="Halensee" area="1.27" inhabitants="15627" population="12305"/>
          <quarter name="Schmargendorf" area="3.59" inhabitants="22205" population="6185"/>
          <quarter name="Westend" area="13.5" inhabitants="41882" population="3102"/>
          <quarter name="Wilmersdorf" area="7.16" inhabitants="102619" population="14332"/>
        </quarters>
      </district>
      <district name="Friedrichshain-Kreuzberg">
        <quarters>
          <quarter name="Friedrichshain" area="9.78" inhabitants="136035" population="13910"/>
          <quarter name="Kreuzberg" area="10.4" inhabitants="154351" population="14841"/>
        </quarters>
      </district>
      <district name="Lichtenberg">
        <quarters>
          <quarter name="Alt-Hohenschönhausen" area="9.33" inhabitants="48979" population="5250"/>
          <quarter name="Falkenberg" area="3.06" inhabitants="1870" population="611.1"/>
          <quarter name="Fennpfuhl" area="2.12" inhabitants="34074" population="16073"/>
          <quarter name="Friedrichsfelde" area="5.55" inhabitants="53813" population="9696"/>
          <quarter name="Karlshorst" area="6.6" inhabitants="27956" population="4236"/>
          <quarter name="Lichtenberg" area="7.22" inhabitants="41758" population="5784"/>
          <quarter name="Malchow" area="1.54" inhabitants="635" population="412.3"/>
          <quarter name="Neu-Hohenschönhausen" area="5.16" inhabitants="56918" population="11031"/>
          <quarter name="Rummelsburg" area="4.52" inhabitants="25650" population="5675"/>
          <quarter name="Wartenberg" area="6.92" inhabitants="2548" population="368.2"/>
        </quarters>
      </district>
      <district name="Marzahn-Hellersdorf">
        <quarters>
          <quarter name="Biesdorf" area="12.4" inhabitants="28069" population="2264"/>
          <quarter name="Hellersdorf" area="8.1" inhabitants="82109" population="10137"/>
          <quarter name="Kaulsdorf" area="8.81" inhabitants="19408" population="2203"/>
          <quarter name="Mahlsdorf" area="12.9" inhabitants="29360" population="2276"/>
          <quarter name="Marzahn" area="19.5" inhabitants="111021" population="5693"/>
        </quarters>
      </district>
      <district name="Mitte">
        <quarters>
          <quarter name="Gesundbrunnen" area="6.13" inhabitants="95175" population="15526"/>
          <quarter name="Hansaviertel" area="0.53" inhabitants="5926" population="11181"/>
          <quarter name="Mitte" area="10.7" inhabitants="102465" population="9576"/>
          <quarter name="Moabit" area="7.72" inhabitants="80495" population="10427"/>
          <quarter name="Tiergarten" area="5.17" inhabitants="14881" population="2878"/>
          <quarter name="Wedding" area="9.23" inhabitants="86806" population="9405"/>
        </quarters>
      </district>
      <district name="Neukölln">
        <quarters>
          <quarter name="Britz" area="12.4" inhabitants="42796" population="3451"/>
          <quarter name="Buckow" area="6.35" inhabitants="40703" population="6410"/>
          <quarter name="Gropiusstadt" area="2.66" inhabitants="37630" population="14147"/>
          <quarter name="Neukölln" area="11.7" inhabitants="166157" population="14201"/>
          <quarter name="Rudow" area="11.8" inhabitants="42631" population="3613"/>
        </quarters>
      </district>
      <district name="Pankow">
        <quarters>
          <quarter name="Blankenburg" area="6.03" inhabitants="6875" population="1140"/>
          <quarter name="Blankenfelde" area="13.4" inhabitants="2064" population="154"/>
          <quarter name="Buch" area="18.2" inhabitants="16868" population="926.8"/>
          <quarter name="Französisch Buchholz" area="12" inhabitants="21281" population="1773"/>
          <quarter name="Heinersdorf" area="3.95" inhabitants="7869" population="1992"/>
          <quarter name="Karow" area="6.65" inhabitants="19679" population="2959"/>
          <quarter name="Niederschönhausen" area="6.49" inhabitants="31996" population="4930"/>
          <quarter name="Pankow" area="5.66" inhabitants="64945" population="11474"/>
          <quarter name="Prenzlauer Berg" area="11" inhabitants="165003" population="15000"/>
          <quarter name="Rosenthal" area="4.9" inhabitants="9596" population="1958"/>
          <quarter name="Stadtrandsiedlung Malchow" area="5.68" inhabitants="1120" population="197.2"/>
          <quarter name="Weißensee" area="7.93" inhabitants="54032" population="6814"/>
          <quarter name="Wilhelmsruh" area="1.37" inhabitants="8007" population="5845"/>
        </quarters>
      </district>
      <district name="Reinickendorf">
        <quarters>
          <quarter name="Borsigwalde" area="2" inhabitants="6777" population="3389"/>
          <quarter name="Frohnau" area="7.8" inhabitants="16814" population="2156"/>
          <quarter name="Heiligensee" area="10.7" inhabitants="18100" population="1692"/>
          <quarter name="Hermsdorf" area="6.1" inhabitants="16607" population="2722"/>
          <quarter name="Konradshöhe" area="2.2" inhabitants="6004" population="2729"/>
          <quarter name="Lübars" area="5" inhabitants="5203" population="1041"/>
          <quarter name="Märkisches Viertel" area="3.2" inhabitants="40379" population="12618"/>
          <quarter name="Reinickendorf" area="10.5" inhabitants="83909" population="7991"/>
          <quarter name="Tegel" area="33.7" inhabitants="36986" population="1098"/>
          <quarter name="Waidmannslust" area="2.3" inhabitants="10973" population="4771"/>
          <quarter name="Wittenau" area="5.9" inhabitants="24656" population="4179"/>
        </quarters>
      </district>
      <district name="Spandau">
        <quarters>
          <quarter name="Falkenhagener Feld" area="6.88" inhabitants="38759" population="5634"/>
          <quarter name="Gatow" area="10.1" inhabitants="3733" population="369.6"/>
          <quarter name="Hakenfelde" area="20.4" inhabitants="31296" population="1534"/>
          <quarter name="Haselhorst" area="4.73" inhabitants="15663" population="3311"/>
          <quarter name="Kladow" area="14.8" inhabitants="16212" population="1095"/>
          <quarter name="Siemensstadt" area="5.66" inhabitants="12831" population="2267"/>
          <quarter name="Spandau" area="8.03" inhabitants="39560" population="4927"/>
          <quarter name="Staaken" area="10.9" inhabitants="46607" population="4276"/>
          <quarter name="Wilhelmstadt" area="10.4" inhabitants="40536" population="3898"/>
        </quarters>
      </district>
      <district name="Steglitz-Zehlendorf">
        <quarters>
          <quarter name="Dahlem" area="8.39" inhabitants="16929" population="2018"/>
          <quarter name="Lankwitz" area="6.99" inhabitants="43566" population="6233"/>
          <quarter name="Lichterfelde" area="18.2" inhabitants="86206" population="4737"/>
          <quarter name="Nikolassee" area="19.6" inhabitants="16695" population="851.8"/>
          <quarter name="Steglitz" area="6.79" inhabitants="75803" population="11164"/>
          <quarter name="Wannsee" area="23.7" inhabitants="10334" population="436"/>
          <quarter name="Zehlendorf" area="18.8" inhabitants="60538" population="3220"/>
        </quarters>
      </district>
      <district name="Tempelhof-Schöneberg">
        <quarters>
          <quarter name="Friedenau" area="1.65" inhabitants="28263" population="17129"/>
          <quarter name="Lichtenrade" area="10.1" inhabitants="51955" population="5144"/>
          <quarter name="Mariendorf" area="9.38" inhabitants="53094" population="5660"/>
          <quarter name="Marienfelde" area="9.15" inhabitants="32349" population="3535"/>
          <quarter name="Schöneberg" area="10.6" inhabitants="123075" population="11611"/>
          <quarter name="Tempelhof" area="12.2" inhabitants="62248" population="5102"/>
        </quarters>
      </district>
      <district name="Treptow-Köpenick">
        <quarters>
          <quarter name="Adlershof" area="6.11" inhabitants="19934" population="3263"/>
          <quarter name="Altglienicke" area="7.89" inhabitants="29357" population="3721"/>
          <quarter name="Alt-Treptow" area="2.31" inhabitants="12878" population="5575"/>
          <quarter name="Baumschulenweg" area="4.82" inhabitants="18842" population="3909"/>
          <quarter name="Bohnsdorf" area="6.52" inhabitants="11671" population="1790"/>
          <quarter name="Friedrichshagen" area="14" inhabitants="19145" population="1368"/>
          <quarter name="Grünau" area="9.13" inhabitants="6784" population="743"/>
          <quarter name="Johannisthal" area="6.54" inhabitants="19853" population="3036"/>
          <quarter name="Köpenick" area="34.9" inhabitants="66765" population="1913"/>
          <quarter name="Müggelheim" area="22.2" inhabitants="6798" population="306.2"/>
          <quarter name="Niederschöneweide" area="3.49" inhabitants="12850" population="3682"/>
          <quarter name="Oberschöneweide" area="6.18" inhabitants="23500" population="3803"/>
          <quarter name="Plänterwald" area="3.01" inhabitants="11365" population="3776"/>
          <quarter name="Rahnsdorf" area="21.5" inhabitants="9523" population="442.9"/>
          <quarter name="Schmöckwitz" area="17.1" inhabitants="4424" population="258.7"/>
        </quarters>
      </district>
    </districts>
  </city>
</cities>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1bcf2103e3ea3c7799a2a7415bd17f11");
});
%}

###
# Valid XSLT without XPath and with output
# Expectations:
# - Status code 200 Success
# - Content-Length: 640
# - Content-Type: application/xslt+xml
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2f1ea328bbac65f31ee4a6922522dcd2");
});
%}

###
# Valid XSLT without XPath and with output
# Expectations:
# - Status code 200 Success
# - Content-Length: 397
# - Content-Type: application/xslt+xml
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']
POST {{service}}0x2f2f64697374726963745b406e616d653d274c69636874656e62657267275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="district" select="/district/@name"/>  
    <district name="{$district}">
	  <quarters>
	  <xsl:for-each select="//quarter">
	  <xsl:variable name="quarter" select="@name"/>
	    <quarter name="{$quarter}"/>
	  </xsl:for-each>
      </quarters>
	</district>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "93734cf15ca25d62e091f600d74b0598");
});
%}

###
# Valid XSLT without XPath and with output
# Expectations:
# - Status code 200 Success
# - Content-Length: 287
# - Content-Type: text/plain
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']
POST {{service}}0x2f2f64697374726963745b406e616d653d274c69636874656e62657267275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
Quarters of district: <xsl:value-of select="/district/@name"/>  
----
<xsl:for-each select="//quarter">
<xsl:value-of select="concat(format-number(@area, '0.00'), ' km²')"/>
<xsl:text> </xsl:text>
<xsl:value-of select="@name"/><xsl:text>&#13;&#10;</xsl:text>
</xsl:for-each>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f796fd576cab5354d6ca55c46ccca809");
});
%}

###
# Wrong Content-Type
# Expectations:
# - Status code 415 Unsupported Media Type
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml-x

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a2de0329bcb910edd87741f25430013a");
});
%}

###
# Wrong XSLT markup, xsl:templatex is used instead of xsl:template
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (xsltParseStylesheetTop: unknown templatex element)
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:templatex match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:templatex>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "50298bd8780b5ccc5ac7711aedcda12b");
});
%}

###
# Wrong XSLT markup, xsl:templatex is used and is closed by xsl:template
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (Opening and ending tag mismatch...
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:templatex match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "14e63d973e14ac3c75135e7debbd1c9e");
});
%}

###
# Wrong XSLT markup, city tag is not closed
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (Opening and ending tag mismatch...
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:templatex match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8b38fc1bd964ed96818d1b7aef4aacf2");
});
%}

###
# Wrong XSLT markup, city tag is not closed
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (EndTag: '</' not found)
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:templatex match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2242a36e4685ff6f906670da05ae646f");
});
%}

###
# Wrong XSLT EL function sumx (does not exists)
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (Failed to evaluate the expression of variable 'area')
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sumx(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sumx(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f2e863cc550b8e23ee5cb225b0b74f73");
});
%}

###
# Wrong XSLT EL in variable: city attribute: select ] is missing
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (XSLT-variable: Failed to compile the XPath expression ...
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="city" select="//city[@name='Berlin'/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2264540253e7965730125b1820e51864");
});
%}

###
# Valid XSLT but without output
# Expectations:
# - Status code 200 Success
# - Content-Length: 0
# - Content-Type: application/xslt+xml
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "012bbf2ef00832e318ac1b809c613d54");
});
%}

###
# Valid XSLT but without output
# Expectations:
# - Status code 200 Success
# - Content-Length: 0
# - Content-Type: application/xslt+xml
POST {{service}}/statistic/cities/city HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f15b098aec72729d8a028b942cd96d69");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
POST {{service}}/statistic/cities/unknow HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6020b2336bb87900a95a9fcb5039a7df");
});
%}

###
# XPath functions are not supported
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
POST {{service}}name(/statistic) HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "39765878d443f5b57fe7640c91eafffa");
});
%}

###
# Invalid XPath /books/book[1]x
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
POST {{service}}/books/book%5B1%5Dx HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1959d950fd7b5e488ab5408e1e353924");
});
%}

###
# POST without Content-Type should be responded with status 415
# Expectations:
# - Status code 415 Unsupported Media Type
POST {{service}} HTTP/1.0
Storage: {{storage_post}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fd8cd4390dc043a55c88d711cd5bf30e");
});
%}

###
# POST without response body should be responded with status 422
# Expectations:
# - Status code 422 Unprocessable Entity
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f9c5b800b51e1d0fc12e0f4b70eb0aff");
});
%}

###
# XPath with serveral elements as target should work
# Expectations:
# - Content-Length: 40
# - Content: Count: 2x
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}0x2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    Count: <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "20525e5c8692d6adda295029058ade8d");
});
%}

###
# XPath with serveral attributes as target should work
# Expectations:
# - Content-Length: 56
# - Content: Names: 12x Areas: 96x
# - URI: //district/@name|//quarter/@area
POST {{service}}0x2f2f64697374726963742f406e616d657c2f2f717561727465722f4061726561 HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    Names: <xsl:value-of select="count(//name)"/>x
    Areas: <xsl:value-of select="count(//area)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1b851f77c2ff677ea20d13939e589593");
});
%}

###
# Valid XSLT without XPath and with output
# Text/JSON output, the JSON directive in the URI has an effect.
# Expectations:
# - Status code 200 Success
# - Content-Length: 1358
# - Content-Type: application/json
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']!json
POST {{service}}0x2f2f64697374726963745b406e616d653d274c69636874656e62657267275d216a736f6e HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="district" select="/district/@name"/>
    <district name="{$district}">
	  <quarters>
	  <xsl:for-each select="//quarter">
	  <xsl:variable name="quarter" select="@name"/>
	    <quarter name="{$quarter}"/>
	  </xsl:for-each>
      </quarters>
	</district>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "89b39bc634a559d896f6a933d8ff6183");
});
%}

###
# Valid XSLT without XPath and with output
# Text output, the JSON directive in the URI has no effect.
# Expectations:
# - Status code 200 Success
# - Content-Length: 285
# - Content-Type: text/plain
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']!json
POST {{service}}0x2f2f64697374726963745b406e616d653d274c69636874656e62657267275d216a736f6e HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
Quarters of district: <xsl:value-of select="/district/@name"/>
----
<xsl:for-each select="//quarter">
<xsl:value-of select="concat(format-number(@area, '0.00'), ' km²')"/>
<xsl:text> </xsl:text>
<xsl:value-of select="@name"/><xsl:text>&#13;&#10;</xsl:text>
</xsl:for-each>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b5ff60aa14cbcbe049c6abf47c815670");
});
%}

###

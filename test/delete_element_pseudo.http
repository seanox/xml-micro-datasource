# Test sequence for deleting of pseudo elements in the storage.

# DELETE deletes elements and attributes in the storage.
# The position for deletion  is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish
# Round brackets in XPath should not be a problem.
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}(/books/book%5B1%5D)/chapter%5B1%5D::first HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d9206ddee86b2824a0f7544127f86ec7");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fd53c82599954ff7fee6005257784866");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 108x UID-A 1x UID-M
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Content-Type: application/xslt+xml

<book title="Book-A" a="A" b="A" c="A" d="A">
  <chapter title="Chapter-A-A">
    Text Text 1
    <text title="Text A1"/>
    Text Text 2
    <text title="Text A2"/>
    Text Text 3
    <text title="Text A3"/>
    Text Text 4
  </chapter>
  <chapter title="Chapter-B">
    <text title="Text A4"/>
    <text title="Text A5"/>
    <text title="Text A6"/>
    <text title="Text A7"/>
    <text title="Text A8"/>
    <text title="Text A9"/>
    <text title="Text AA"/>
    <text title="Text AB"/>
    <text title="Text AC"/>
    <text title="Text AD"/>
    <text title="Text AE"/>
    <text title="Text AF"/>
  </chapter>
</book>
<book title="Book-B" a="B" b="B" c="B" d="B">
  <chapter title="Chapter-B-A">
    <text title="Text B1"/>
    <text title="Text B2"/>
    <text title="Text B3"/>
  </chapter>
  <chapter title="Chapter-B-B">
    <text title="Text B4"/>
    <text title="Text B5"/>
    <text title="Text B6"/>
    <text title="Text B7"/>
    <text title="Text B8"/>
    <text title="Text B9"/>
    <text title="Text BA"/>
    <text title="Text BB"/>
    <text title="Text BC"/>
    <text title="Text BD"/>
    <text title="Text BE"/>
    <text title="Text BF"/>
  </chapter>
</book>
<book title="Book-C" a="C" b="C" c="C" d="C">
  <chapter title="Chapter-C-A">
    <text title="Text C1"/>
    <text title="Text C2"/>
    <text title="Text C3"/>
  </chapter>
  <chapter title="Chapter-C-B">
    <text title="Text C4"/>
    <text title="Text C5"/>
    <text title="Text C6"/>
    <text title="Text C7"/>
    <text title="Text C8"/>
    <text title="Text C9"/>
    <text title="Text CA"/>
    <text title="Text CB"/>
    <text title="Text CC"/>
    <text title="Text CD"/>
    <text title="Text CE"/>
    <text title="Text CF"/>
  </chapter>
</book>
<book title="Book-D" a="D" b="D" c="D" d="D">
  <chapter title="Chapter-D-A">
    <text title="Text D1"/>
    <text title="Text D2"/>
    <text title="Text D3"/>
  </chapter>
  <chapter title="Chapter-D-B">
    <text title="Text D4"/>
    <text title="Text D5"/>
    <text title="Text D6"/>
    <text title="Text D7"/>
    <text title="Text D8"/>
    <text title="Text D9"/>
    <text title="Text DA"/>
    <text title="Text DB"/>
    <text title="Text DC"/>
    <text title="Text DD"/>
    <text title="Text DE"/>
    <text title="Text DF"/>
  </chapter>
</book>
<book title="Book-E" a="E" b="E" c="E" d="E">
  <chapter title="Chapter-E-A">
    <text title="Text E1"/>
    <text title="Text E2"/>
    <text title="Text E3"/>
  </chapter>
  <chapter title="Chapter-E-B">
    <text title="Text E4"/>
    <text title="Text E5"/>
    <text title="Text E6"/>
    <text title="Text E7"/>
    <text title="Text E8"/>
    <text title="Text E9"/>
    <text title="Text EA"/>
    <text title="Text EB"/>
    <text title="Text EC"/>
    <text title="Text ED"/>
    <text title="Text EE"/>
    <text title="Text EF"/>
  </chapter>
</book>
<book title="Book-F" a="F" b="F" c="F" d="F">
  <chapter title="Chapter-F-A">
    <text title="Text F1"/>
    <text title="Text F2"/>
    <text title="Text F3"/>
  </chapter>
  <chapter title="Chapter-F-B">
    <text title="Text F4"/>
    <text title="Text F5"/>
    <text title="Text F6"/>
    <text title="Text F7"/>
    <text title="Text F8"/>
    <text title="Text F9"/>
    <text title="Text FA"/>
    <text title="Text FB"/>
    <text title="Text FC"/>
    <text title="Text FD"/>
    <text title="Text FE"/>
    <text title="Text FF"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5e14dd82f03090ab8addc652b7d771e6");
});
%}

###
# Delete the first element in all chapters.
# Because of the request body when putting, the first element is always a text
# element with line break. Therefore there are no Deletes in the
# Storage-Effects header.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 12x UID-M
# - Storage: In all chapters the first text entry was deleted
DELETE {{service}}(/books/book)/chapter::first HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "84369a22a0c0b35c507a4bc1fe6bb016");
});
%}

###
# In the second delete pass, elements are also included and thus
# The syntax of pseudo elements is case-insentive
# Storage-Effects header also contains delete entries.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 12x UID-D, 12x UID-M
# - Storage: In all chapters the first text entry was deleted
DELETE {{service}}(/books/book)/chapter::firsT HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "256f67099009692a2092ced26075afaa");
});
%}

###
# Delete the last element in all chapters.
# Because of the request body when putting, the first element is always a text
# element with line break. Therefore there are no Deletes in the
# Storage-Effects header.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 12x UID-M
# - Storage: In all chapters the last text entry was deleted
DELETE {{service}}(/books/book)/chapter::last HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "85a112ece8d0a583bab1c51035faf25c");
});
%}

###
# In the second delete pass, elements are also included and thus
# The syntax of pseudo elements is case-insentive
# Storage-Effects header also contains delete entries.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 12x UID-D, 12x UID-M
# - Storage: In all chapters the last entry was deleted
DELETE {{service}}(/books/book)/chapter::lasT HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9f015d0bacd89acd6199f29f7d4f5f97");
});
%}

###
# Invalid/unknown pseudo elements are interpreted as invalid XPath axis
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
DELETE {{service}}(/books/book)/chapter::wrong HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "122c3a46998f110ad68a15b3fbcb60f8");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-A 1x UID-M
PUT {{service}}/books HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Content-Type: application/xslt+xml

<book title="Book-E" a="E" b="E" c="E" d="E">
  <chapter title="Chapter-E-A">
    <text title="Text E1"/>
    <text title="Text E2"/>
    <text title="Text E3"/>
  </chapter>
  <chapter title="Chapter-E-B">
    Text
    <text title="Text E4"/>
    Text
    <text title="Text E5"/>
    Text
    <text title="Text E6"/>
    Text
    <text title="Text E7"/>
    Text
    <text title="Text E8"/>
    Text
    <text title="Text E9"/>
    Text
    <text title="Text EA"/>
    Text
    <text title="Text EB"/>
    Text
    <text title="Text EC"/>
    Text
    <text title="Text ED"/>
    Text
    <text title="Text EE"/>
    Text
    <text title="Text EF"/>
    Text
  </chapter>
</book>
<book title="Book-F" a="F" b="F" c="F" d="F">
  <chapter title="Chapter-F-A">
    <text title="Text F1"/>
    <text title="Text F2"/>
    <text title="Text F3"/>
  </chapter>
  <chapter title="Chapter-F-B">
    Text
    <text title="Text F4"/>
    Text
    <text title="Text F5"/>
    Text
    <text title="Text F6"/>
    Text
    <text title="Text F7"/>
    Text
    <text title="Text F8"/>
    Text
    <text title="Text F9"/>
    Text
    <text title="Text FA"/>
    Text
    <text title="Text FB"/>
    Text
    <text title="Text FC"/>
    Text
    <text title="Text FD"/>
    Text
    <text title="Text FE"/>
    Text
    <text title="Text FF"/>
    Text
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d9ea57f148220ec95a1b859650b3220e");
});
%}

###
# Delete all elements (nodes and text) before //text[@title='Text EA'].
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 6x UID-D 1x UID-M
# - URI: //text[@title='Text EA']::before
DELETE {{service}}0x2f2f746578745b407469746c653d2754657874204541275d3a3a6265666f7265 HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e2ca4f1bfef4876974bad23c770b398d");
});
%}

###
# Delete all elements (nodes and text) after //text[@title='Text FA'].
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 6x UID-D 1x UID-M
# - URI: //text[@title='Text FA']::after
DELETE {{service}}0x2f2f746578745b407469746c653d2754657874204641275d3a3a6166746572 HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3f2a3b9937d744465aee9a458057a628");
});
%}

###
# XPath functions are not supported
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
DELETE {{service}}name(.) HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "46521117ad3127d89a9ca98e692c6e43");
});
%}

###
# Before on the first element must be executed, but has no effect.
# The request is preparation, because a text element exits before the first element.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - URI: //text[@title='Text F1']::before
DELETE {{service}}0x2f2f746578745b407469746c653d2754657874204631275d3a3a6265666f7265 HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c7ba7db4e89f2d030babfbe3cd3c6017");
});
%}

###
# Before on the first element must be executed, but has no effect.
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - URI: //text[@title='Text F1']::before
DELETE {{service}}0x2f2f746578745b407469746c653d2754657874204631275d3a3a6265666f7265 HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "81d1c7d33c9098ffec87065ce3b64156");
});
%}

###
# After on the last element must be executed, but has no effect.
# The request is preparation, because a text element exits before the first element.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-M
# - URI: //text[@title='Text F3']::after
DELETE {{service}}0x2f2f746578745b407469746c653d2754657874204633275d3a3a6166746572 HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a467c3339027242bea261ed4d2c31a8c");
});
%}

###
# After on the last element must be executed, but has no effect.
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - URI: //text[@title='Text F3']::after
DELETE {{service}}0x2f2f746578745b407469746c653d2754657874204633275d3a3a6166746572 HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b2c576cd75c44800a5235a47a57b388b");
});
%}

###
# First in with an empty element should not be a problem
# The request just has no effect
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - URI: //text[@title='Text F9']::first
DELETE {{service}}0x2f2f746578745b407469746c653d2754657874204639275d3a3a6669727374 HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5d6bbbc6c7c43b315773250e46a5a6d6");
});
%}

###
# Last in with an empty element should not be a problem
# The request just has no effect
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - URI: //text[@title='Text F9']::last
DELETE {{service}}0x2f2f746578745b407469746c653d2754657874204639275d3a3a6c617374 HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Accept-Effects: ALL

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fccdd0ff0572fe2ec22fbaa3137aa693");
});
%}

###
# Axes with positons function must work
# For the last book, the chapter before the last chapter must be deleted.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID-D, 1x UID-M
DELETE {{service}}/books/book%5Blast()%5D/chapter%5Blast()%5D::before HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9ee19535ed64d0bf530244383043a4d4");
});
%}

###
# Delete outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
DELETE {{service}}/books::before HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "49e4336045163e69f441934e2725bc33");
});
%}

###
# Delete outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
DELETE {{service}}/books::after HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d32d8a9e41450f6c4e00f2a9dfa9c3dd");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..::before
DELETE {{service}}0x2f2a2f2e2e3a3a6265666f7265 HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d405d4056a4dd9516f7ad03975a25938");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..::before
DELETE {{service}}0x2f626f6f6b732f2e2e3a3a6265666f7265 HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "46b1b1e8dc4eea5bf80b96f6c676d6e1");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/wrong::before HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "324470e909be843331ee15fd26c3498a");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/wrong/wrong::before HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8606dd1a95e8abe30487ec541727de86");
});
%}

###

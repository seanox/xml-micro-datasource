# Test sequence for deleting of attributes of storage elements.

# DELETE deletes elements and attributes in the storage.
# The position for deletion  is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_delete_attribute}}
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b4f99fde4022739cabc80627335a6de5");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e6a77975366951a2b413b6e293abd18e");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-A 1x UID-M
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_delete_attribute}}
Content-Type: application/xslt+xml

<book title="Book-A" a="A" b="A" c="A" d="A">
  <chapter title="Chapter-A-A">
    <text title="Text A1"/>
    <text title="Text A2"/>
    <text title="Text A3"/>
  </chapter>
  <chapter title="Chapter-B">
    <text title="Text A4"/>
    <text title="Text A5"/>
    <text title="Text A6"/>
  </chapter>
</book>
<book title="Book-B" a="B" b="B" c="B" d="B">
  <chapter title="Chapter-B-A">
    <text title="Text B1"/>
    <text title="Text B2"/>
    <text title="Text B3"/>
  </chapter>
  <chapter title="Chapter-B-B">
    <text title="Text B4"/>
    <text title="Text B5"/>
    <text title="Text B6"/>
  </chapter>
</book>
<book title="Book-C" a="C" b="C" c="C" d="C">
  <chapter title="Chapter-C-A">
    <text title="Text C1"/>
    <text title="Text C2"/>
    <text title="Text C3"/>
  </chapter>
  <chapter title="Chapter-C-B">
    <text title="Text C4"/>
    <text title="Text C5"/>
    <text title="Text C6"/>
  </chapter>
</book>
<book title="Book-D" a="D" b="D" c="D" d="D">
  <chapter title="Chapter-D-A">
    <text title="Text D1"/>
    <text title="Text D2"/>
    <text title="Text D3"/>
  </chapter>
  <chapter title="Chapter-D-B">
    <text title="Text D4"/>
    <text title="Text D5"/>
    <text title="Text D6"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3d975c7007c5fd2d951a70152e78056a");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID
PUT {{service}}/books/@xa HTTP/1.0
Storage: {{storage_delete_attribute}}
Content-Type: text/plain

xa

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "abfce4b3e750af1c53d6dcf5ad0525c8");
});
%}

###
# Attribute does not exist
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/book%5B1%5D/attribute::not_exists HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e34f698051d94868e065177ac0f9de34");
});
%}

###
# Attribute does not exist
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/book%5B1%5D/@not_exists HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3434fa1142ad793e8a92e4ab68aa2b17");
});
%}

###
# XPath functions are not supported
# Round brackets in XPath should not be a problem.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
DELETE {{service}}name(.) HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7ccb2806ef3a7f114165bc1a6e34d966");
});
%}

###
# Attribute a does exist and can be deleted
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID (M)
# - Storage-Revision: was increased
# - Attribute /books/book[1]/attribute::a was deleted
DELETE {{service}}/books/book%5B1%5D/attribute::a HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5576587e71f5709bef8947d5177d59f9");
});
%}

###
# Attribute a no longer exists
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/book%5B1%5D/attribute::a HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8967ca840e845eb1b51061e22fff7a85");
});
%}

###
# Attribute b does exist and can be deleted
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID (M)
# - Storage-Revision: was increased
# - Attribute /books/book[1]/@b was deleted
DELETE {{service}}/books/book%5B1%5D/@b HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "96b13cc2d3b0f9ca8c89447a59169dc6");
});
%}

###
# Attribute b no longer exists
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/book%5B1%5D/@b HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ace4cfdc8f0fd442889dd38df7603036");
});
%}

###
# Count of text-attributes in book[1]
# Expectations:
# - Status code 200 Success
# - Content-Length: 1
# - Content-Type: text/plain
# - Response-Body: 6
# - URI: count(//book[1]//text[@title])
GET {{service}}0x636f756e74282f2f626f6f6b5b315d2f2f746578745b407469746c655d29 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7a568ebe49374ff97fd66b06bd373893");
});
%}

###
# Attribute does not exist
# Round brackets in XPath should not be a problem.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 6x UIDs (M)
# - Storage-Revision: was increased
# - All title attributes in  book[1] was deleted
# - URI: (//book[1]//text)/@title
DELETE {{service}}0x2f2f626f6f6b5b315d2f2f746578742f407469746c65 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "382fa1c5a02b54a6f9eee9d21edcd61f");
});
%}

###
# Count of text-attributes in book[1]
# Expectations:
# - Status code 200 Success
# - Content-Length: 1
# - Content-Type: text/plain
# - Response-Body: 0
# - URI: count(//book[1]//text[@title])
GET {{service}}0x636f756e74282f2f626f6f6b5b315d2f2f746578745b407469746c655d29 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b055cc57b9c670a08d7e4b54f6b7d215");
});
%}

###
# Count of text-attributes in book[1]
# Expectations:
# - Status code 200 Success
# - Content-Length: 1
# - Content-Type: text/plain
# - Response-Body: 6
# - URI: count(//book[2]//text[attribute::title])
GET {{service}}0x636f756e74282f2f626f6f6b5b325d2f2f746578745b6174747269627574653a3a7469746c655d29 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5c1569e3ec5f903f1cf7bdb0599edd37");
});
%}

###
# Attribute does not exist
# Round brackets in XPath should not be a problem.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 6x UIDs (M)
# - Storage-Revision: was increased
# - All title attributes in  book[2] was deleted
# - URI: (//book[2]//text)/attribute::title
DELETE {{service}}0x282f2f626f6f6b5b325d2f2f74657874292f6174747269627574653a3a7469746c65 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e9607fae4fbc91608da3fc85ea8a1adf");
});
%}

###
# Count of text-attributes in book[1]
# Expectations:
# - Status code 200 Success
# - Content-Length: 1
# - Content-Type: text/plain
# - Response-Body: 0
# - URI: count(//book[2]//text[attribute::title])
GET {{service}}0x636f756e74282f2f626f6f6b5b325d2f2f746578745b6174747269627574653a3a7469746c655d29 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a69f832a1f7decceec70ec1dacc96a21");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___rev is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
DELETE {{service}}/books/@___rev HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d1adecceb8f19455175451234bb28c3f");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___uid is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
DELETE {{service}}/books/@___uid HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "88654b6b4ce1086a0c08a427160821cf");
});
%}

###
# DELETE outside the root element, shall be ignored
# but PATCH can only set attributes that exist
# Expectations:
# - Status code 404 Resource Not Found
# - URI: /*/../@___xxx
DELETE {{service}}0x2f2a2f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "62767f857e46ae976d38c0aed072a092");
});
%}

###
# DELETE outside the root element, shall be ignored
# but PATCH can only set attributes that exist
# Expectations:
# - Status code 404 Resource Not Found
# - URI: //books/../@___xxx
DELETE {{service}}0x2f2f626f6f6b732f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fb049a3b4b9272206b56f8d730deabaa");
});
%}

###

# Test sequence for deleting of attributes of storage elements.

# DELETE deletes elements and attributes in the storage.
# The position for deletion  is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_delete_attribute}}
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5661e4a5038209ff86df7e0b17785864");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "898d94ae0c3edf1d25b196bcb1269208");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-A 1x UID-M
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_delete_attribute}}
Content-Type: application/xslt+xml

<book title="Book-A" a="A" b="A" c="A" d="A">
  <chapter title="Chapter-A-A">
    <text title="Text A1"/>
    <text title="Text A2"/>
    <text title="Text A3"/>
  </chapter>
  <chapter title="Chapter-B">
    <text title="Text A4"/>
    <text title="Text A5"/>
    <text title="Text A6"/>
  </chapter>
</book>
<book title="Book-B" a="B" b="B" c="B" d="B">
  <chapter title="Chapter-B-A">
    <text title="Text B1"/>
    <text title="Text B2"/>
    <text title="Text B3"/>
  </chapter>
  <chapter title="Chapter-B-B">
    <text title="Text B4"/>
    <text title="Text B5"/>
    <text title="Text B6"/>
  </chapter>
</book>
<book title="Book-C" a="C" b="C" c="C" d="C">
  <chapter title="Chapter-C-A">
    <text title="Text C1"/>
    <text title="Text C2"/>
    <text title="Text C3"/>
  </chapter>
  <chapter title="Chapter-C-B">
    <text title="Text C4"/>
    <text title="Text C5"/>
    <text title="Text C6"/>
  </chapter>
</book>
<book title="Book-D" a="D" b="D" c="D" d="D">
  <chapter title="Chapter-D-A">
    <text title="Text D1"/>
    <text title="Text D2"/>
    <text title="Text D3"/>
  </chapter>
  <chapter title="Chapter-D-B">
    <text title="Text D4"/>
    <text title="Text D5"/>
    <text title="Text D6"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "34b9180ce78aeb1c650386d8635e1073");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID
PUT {{service}}/books/@xa HTTP/1.0
Storage: {{storage_delete_attribute}}
Content-Type: text/plain

xa

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "25455a1641d39678984713bf920f334b");
});
%}

###
# Attribute does not exist
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/book%5B1%5D/attribute::not_exists HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7caab3df1433ef0a4b703d4a832ef651");
});
%}

###
# Attribute does not exist
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/book%5B1%5D/@not_exists HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5631a972a5eae164d4647996faabd4ad");
});
%}

###
# XPath functions are not supported
# Round brackets in XPath should not be a problem.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
DELETE {{service}}name(.) HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e671b6e8cbef967f0f84d994da0891f4");
});
%}

###
# Attribute a does exist and can be deleted
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID (M)
# - Storage-Revision: was increased
# - Attribute /books/book[1]/attribute::a was deleted
DELETE {{service}}/books/book%5B1%5D/attribute::a HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0fff27cbe245f87719ba74c0fe153aea");
});
%}

###
# Attribute a no longer exists
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/book%5B1%5D/attribute::a HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a0809d7fc66bade75824477d06726abe");
});
%}

###
# Attribute b does exist and can be deleted
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID (M)
# - Storage-Revision: was increased
# - Attribute /books/book[1]/@b was deleted
DELETE {{service}}/books/book%5B1%5D/@b HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "06af2e578d5459149b6a7cc2edfdcad9");
});
%}

###
# Attribute b no longer exists
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/book%5B1%5D/@b HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "edaa470f78e14ae547cbe0b28d7dbdc4");
});
%}

###
# Count of text-attributes in book[1]
# Expectations:
# - Status code 200 Success
# - Content-Length: 1
# - Content-Type: text/plain
# - Response-Body: 6
# - URI: count(//book[1]//text[@title])
GET {{service}}0x636f756e74282f2f626f6f6b5b315d2f2f746578745b407469746c655d29 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "86a01a48cb77a0d4ab047d936bf2f152");
});
%}

###
# Attribute does not exist
# Round brackets in XPath should not be a problem.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 6x UIDs (M)
# - Storage-Revision: was increased
# - All title attributes in  book[1] was deleted
# - URI: (//book[1]//text)/@title
DELETE {{service}}0x2f2f626f6f6b5b315d2f2f746578742f407469746c65 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "05238202a82f61cf40bb7f2ebb870b83");
});
%}

###
# Count of text-attributes in book[1]
# Expectations:
# - Status code 200 Success
# - Content-Length: 1
# - Content-Type: text/plain
# - Response-Body: 0
# - URI: count(//book[1]//text[@title])
GET {{service}}0x636f756e74282f2f626f6f6b5b315d2f2f746578745b407469746c655d29 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b1275bc9bb02f3f0b4d524f632e47681");
});
%}

###
# Count of text-attributes in book[1]
# Expectations:
# - Status code 200 Success
# - Content-Length: 1
# - Content-Type: text/plain
# - Response-Body: 6
# - URI: count(//book[2]//text[attribute::title])
GET {{service}}0x636f756e74282f2f626f6f6b5b325d2f2f746578745b6174747269627574653a3a7469746c655d29 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fa1f610684055c9aad6f8b0fc5ceec50");
});
%}

###
# Attribute does not exist
# Round brackets in XPath should not be a problem.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 6x UIDs (M)
# - Storage-Revision: was increased
# - All title attributes in  book[2] was deleted
# - URI: (//book[2]//text)/attribute::title
DELETE {{service}}0x282f2f626f6f6b5b325d2f2f74657874292f6174747269627574653a3a7469746c65 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "241c01f4968f25212a70402f2b768f86");
});
%}

###
# Count of text-attributes in book[1]
# Expectations:
# - Status code 200 Success
# - Content-Length: 1
# - Content-Type: text/plain
# - Response-Body: 0
# - URI: count(//book[2]//text[attribute::title])
GET {{service}}0x636f756e74282f2f626f6f6b5b325d2f2f746578745b6174747269627574653a3a7469746c655d29 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "00a6925ac791df413fcf2fc8fc3c975d");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___rev is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
DELETE {{service}}/books/@___rev HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4cbc8fe2937beb1593d94c2299f53ce9");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___uid is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
DELETE {{service}}/books/@___uid HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c036fcd2325f82500bb0944e5b18ca39");
});
%}

###
# DELETE outside the root element, shall be ignored
# but PATCH can only set attributes that exist
# Expectations:
# - Status code 404 Resource Not Found
# - URI: /*/../@___xxx
DELETE {{service}}0x2f2a2f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "15b1d3b90a33a347bbc3e3ff72e9e8f2");
});
%}

###
# DELETE outside the root element, shall be ignored
# but PATCH can only set attributes that exist
# Expectations:
# - Status code 404 Resource Not Found
# - URI: //books/../@___xxx
DELETE {{service}}0x2f2f626f6f6b732f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "da8149fc49cedbb437a5ea59169faec0");
});
%}

###

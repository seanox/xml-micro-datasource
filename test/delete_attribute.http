# Test sequence for deleting of attributes of storage elements.

# DELETE deletes elements and attributes in the storage.
# The position for deletion  is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_delete_attribute}}
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b4f99fde4022739cabc80627335a6de5");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ebde6ed65f2a0bee261ae0fe41441479");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-A 1x UID-M
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_delete_attribute}}
Content-Type: application/xml

<book title="Book-A" a="A" b="A" c="A" d="A">
  <chapter title="Chapter-A-A">
    <text title="Text A1"/>
    <text title="Text A2"/>
    <text title="Text A3"/>
  </chapter>
  <chapter title="Chapter-B">
    <text title="Text A4"/>
    <text title="Text A5"/>
    <text title="Text A6"/>
  </chapter>
</book>
<book title="Book-B" a="B" b="B" c="B" d="B">
  <chapter title="Chapter-B-A">
    <text title="Text B1"/>
    <text title="Text B2"/>
    <text title="Text B3"/>
  </chapter>
  <chapter title="Chapter-B-B">
    <text title="Text B4"/>
    <text title="Text B5"/>
    <text title="Text B6"/>
  </chapter>
</book>
<book title="Book-C" a="C" b="C" c="C" d="C">
  <chapter title="Chapter-C-A">
    <text title="Text C1"/>
    <text title="Text C2"/>
    <text title="Text C3"/>
  </chapter>
  <chapter title="Chapter-C-B">
    <text title="Text C4"/>
    <text title="Text C5"/>
    <text title="Text C6"/>
  </chapter>
</book>
<book title="Book-D" a="D" b="D" c="D" d="D">
  <chapter title="Chapter-D-A">
    <text title="Text D1"/>
    <text title="Text D2"/>
    <text title="Text D3"/>
  </chapter>
  <chapter title="Chapter-D-B">
    <text title="Text D4"/>
    <text title="Text D5"/>
    <text title="Text D6"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "358acf5634dbb6022cd958b55106bd49");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID
PUT {{service}}/books/@xa HTTP/1.0
Storage: {{storage_delete_attribute}}
Content-Type: text/plain

xa

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8635a91c494ee676a0a724e9fb29e81b");
});
%}

###
# Attribute does not exist
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/book%5B1%5D/attribute::not_exists HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "85969d469981bfc2f3f7acb938793de3");
});
%}

###
# Attribute does not exist
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/book%5B1%5D/@not_exists HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8e2dd2500c8dda94ed587488a0c82ec1");
});
%}

###
# XPath functions are not supported
# Round brackets in XPath should not be a problem.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
DELETE {{service}}name(.) HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0ad2a0d80e537a2d2fdedd4834e56d05");
});
%}

###
# Attribute a does exist and can be deleted
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID (M)
# - Storage-Revision: was increased
# - Attribute /books/book[1]/attribute::a was deleted
DELETE {{service}}/books/book%5B1%5D/attribute::a HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2a94a63a812dca0c43c5aad3fcd73fd6");
});
%}

###
# Attribute a no longer exists
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/book%5B1%5D/attribute::a HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9889fd8d413aa2c2c605302d7706512c");
});
%}

###
# Attribute b does exist and can be deleted
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID (M)
# - Storage-Revision: was increased
# - Attribute /books/book[1]/@b was deleted
DELETE {{service}}/books/book%5B1%5D/@b HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bee494fc4f7bd5dc836210d68ce8bc4b");
});
%}

###
# Attribute b no longer exists
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}/books/book%5B1%5D/@b HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "149528eae162d4c356f932d53d49998c");
});
%}

###
# Count of text-attributes in book[1]
# Expectations:
# - Status code 200 Success
# - Content-Length: 1
# - Content-Type: text/plain
# - Response-Body: 6
# - URI: count(//book[1]//text[@title])
GET {{service}}0x636f756e74282f2f626f6f6b5b315d2f2f746578745b407469746c655d29 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "21e318661084717faf20cd9043b1f40d");
});
%}

###
# Attribute does not exist
# Round brackets in XPath should not be a problem.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 6x UIDs (M)
# - Storage-Revision: was increased
# - All title attributes in  book[1] was deleted
# - URI: (//book[1]//text)/@title
DELETE {{service}}0x2f2f626f6f6b5b315d2f2f746578742f407469746c65 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b458495dd50a045a3c2d4e5ee078561c");
});
%}

###
# Count of text-attributes in book[1]
# Expectations:
# - Status code 200 Success
# - Content-Length: 1
# - Content-Type: text/plain
# - Response-Body: 0
# - URI: count(//book[1]//text[@title])
GET {{service}}0x636f756e74282f2f626f6f6b5b315d2f2f746578745b407469746c655d29 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "885d5b938b6ea2c1ae2581a7dd5bc523");
});
%}

###
# Count of text-attributes in book[1]
# Expectations:
# - Status code 200 Success
# - Content-Length: 1
# - Content-Type: text/plain
# - Response-Body: 6
# - URI: count(//book[2]//text[attribute::title])
GET {{service}}0x636f756e74282f2f626f6f6b5b325d2f2f746578745b6174747269627574653a3a7469746c655d29 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d975f4523c739dae141c0fd91a326921");
});
%}

###
# Attribute does not exist
# Round brackets in XPath should not be a problem.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 6x UIDs (M)
# - Storage-Revision: was increased
# - All title attributes in  book[2] was deleted
# - URI: (//book[2]//text)/attribute::title
DELETE {{service}}0x282f2f626f6f6b5b325d2f2f74657874292f6174747269627574653a3a7469746c65 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d908873e57f20d2e86ab5e05d64591a4");
});
%}

###
# Count of text-attributes in book[1]
# Expectations:
# - Status code 200 Success
# - Content-Length: 1
# - Content-Type: text/plain
# - Response-Body: 0
# - URI: count(//book[2]//text[attribute::title])
GET {{service}}0x636f756e74282f2f626f6f6b5b325d2f2f746578745b6174747269627574653a3a7469746c655d29 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "50eb2e1803880f274f865c3281c37ceb");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___rev is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
DELETE {{service}}/books/@___rev HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d405e5a7bdf8be760daf7185639d37f6");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   attribute ___uid is ignored, but does not cause errors
# - Response without Storage-Effects header
# - Storage-Revision is not increased
# - Storage-Expiration is extended
DELETE {{service}}/books/@___uid HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7b1bb563a45c1623bc69d0edd5440161");
});
%}

###
# DELETE outside the root element, shall be ignored
# but PATCH can only set attributes that exist
# Expectations:
# - Status code 404 Resource Not Found
# - URI: /*/../@___xxx
DELETE {{service}}0x2f2a2f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "97cf85ebefb4f54a7c6d1a12fadc5c41");
});
%}

###
# DELETE outside the root element, shall be ignored
# but PATCH can only set attributes that exist
# Expectations:
# - Status code 404 Resource Not Found
# - URI: //books/../@___xxx
DELETE {{service}}0x2f2f626f6f6b732f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_delete_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4f0792bc3ad65b40b658448a01b2abe9");
});
%}

###

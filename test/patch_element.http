# Test sequence for patching elements in the storage.

# PATCH changes existing elements and attributes in storage.
# The position for the insert is defined via an XPath.
# The method works almost like PUT, but the XPath axis of the request
# always expects an existing target.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="A1"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4fbeca3db1332fbcd7e12e78de2dcd30");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_patch_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6d93dc3985fe9afdb08c7e9880329eab");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID-A 1x UID-M
# - 4 books are overwritten
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="A2"/>
<book title="B2"/>
<book title="C2"/>
<book title="D2"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "13d7292f7d6209418476ee2f69440921");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="A3">
  <chapter>Text A3</chapter>
</book>
<book title="B3">
  <chapter>Text B3</chapter>
</book>
<book title="C3">
  <chapter>Text C3</chapter>
</book>
<book title="D3">
  <chapter>Text D3</chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b910326cc39e6b4ffe2c1f6dcb98130f");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="A3">
  <chapter><![CDATA[Text A3]]></chapter>
</book>
<book title="B3">
  <chapter><![CDATA[Text B3]]></chapter>
</book>
<book title="C3">
  <chapter><![CDATA[Text C3]]></chapter>
</book>
<book title="D3">
  <chapter><![CDATA[Text D3]]></chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6aaa31b1a4b7c994acc11a0e1cca6e89");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PATCH {{service}}(/books/book)/chapter HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "27c7200b21502e97ab2cd1b806dc56cb");
});
%}

###
# PATCH outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..
PATCH {{service}}0x2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2fa7a0c8261bc24c86bd4eb1de03ab7f");
});
%}

###
# PATCH outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..
PATCH {{service}}0x2f2a2f2e2e HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4fa44d84242c7d0673101737ec32e0ff");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "51cb9e0357c2e76a1dc5748b0ccbd59e");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong/wrong HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "579a1b9aea9a7faa5cb07308084c3624");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 2x UID
# - xxx was created in the first book
PATCH {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bee69c3995e76062e4db94bd2e4a1cd2");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books/book%5B1%5D::before HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a9bf8943a90dd0fbf7cb83d8d572679b");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books/book%5B1%5D::after HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2dfe0100017df6138569e195d01546b8");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books::first HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2e232727399ef463ba1bb58f29d31b0a");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books::last HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6fc74e7749dca3c10f57a65aafd12681");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books::wrong HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9bfb2ef4b7c78a0d0ea86ef711f0b2ba");
});
%}

###
# PATCH does not support XPath functions als axis
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
# - URI: name(.)
PATCH {{service}}0x6e616d65282e29 HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bd2dd531068cc1fcdddfc2377921bacb");
});
%}

###
# INvalid XPath /books/book[1]x
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books/book%5B1%5Dx HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fb40366323e4e780799e1ddcec900089");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-A 1x UID-M
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="Book-A" a="A" b="A" c="A" d="A">
  <chapter title="Chapter-A-A">
    <text title="Text A1"/>
    <text title="Text A2"/>
    <text title="Text A3"/>
  </chapter>
  <chapter title="Chapter-B">
    <text title="Text A4"/>
    <text title="Text A5"/>
    <text title="Text A6"/>
  </chapter>
</book>
<book title="Book-B" a="B" b="B" c="B" d="B">
  <chapter title="Chapter-B-A">
    <text title="Text B1"/>
    <text title="Text B2"/>
    <text title="Text B3"/>
  </chapter>
  <chapter title="Chapter-B-B">
    <text title="Text B4"/>
    <text title="Text B5"/>
    <text title="Text B6"/>
  </chapter>
</book>
<book title="Book-C" a="C" b="C" c="C" d="C">
  <chapter title="Chapter-C-A">
    <text title="Text C1"/>
    <text title="Text C2"/>
    <text title="Text C3"/>
  </chapter>
  <chapter title="Chapter-C-B">
    <text title="Text C4"/>
    <text title="Text C5"/>
    <text title="Text C6"/>
  </chapter>
</book>
<book title="Book-D" a="D" b="D" c="D" d="D">
  <chapter title="Chapter-D-A">
    <text title="Text D1"/>
    <text title="Text D2"/>
    <text title="Text D3"/>
  </chapter>
  <chapter title="Chapter-D-B">
    <text title="Text D4"/>
    <text title="Text D5"/>
    <text title="Text D6"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3456205dd72bfeb18510cc8968d66500");
});
%}

###
# Overwriting an element must work
# The indirectly deleted UIDs must be contained in Storage-Effect
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID-A, 8x UID-D, 1x UID-M
# - Storage-Revision is increased
PATCH {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_patch_element}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6"/>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6560defdf65c4b3b05be183dcb653878");
});
%}

###
# Recursive patching of all elements by a relative and generous XPath.
# The Storage-Effects must be optimized and obsolete entries must be cleaned up.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-D, 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - URI: //*[@___uid]
PATCH {{service}}0x2f2f2a5b405f5f5f7569645d HTTP/1.0
Storage: {{storage_patch_element}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2a02b565afbe9eda6ca3050be0c76aef");
});
%}

###
# Preparation for the next test
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 10x UID-A, 1x UID-D, 1x UID-M
# - Storage-Revision is increased
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6" ___uid="KIC2D3GJ1DWE:35" ___rev="5">
    Text
    <!-- Comment -->
    Text
    <a><b></b></a>
  </text>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ed8b2878e6c83bca1bf9f7029780a422");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-A, 2x UID-D, 1x UID-M
# - Storage-Revision is increased
# - Storage: text title="Text X6" includes only <test/>, comments and text were deleted
PATCH {{service}}/books/chapter%5B2%5D/text%5B3%5D HTTP/1.0
Storage: {{storage_patch_element}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "109c86533ed2dba4915aa55cbbcb7457");
});
%}

###

# Test sequence for patching elements in the storage.
# TODO:

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="A1"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "314d7f3c0d80dcde39c68719244b08cb");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_patch_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e507a34a9225676ede1231ad12537586");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID-A 1x UID-M
# - 4 books are overwritten
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="A2"/>
<book title="B2"/>
<book title="C2"/>
<book title="D2"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ea3b1c9345ada42a07827e12212830ec");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="A3">
  <chapter>Text A3</chapter>
</book>
<book title="B3">
  <chapter>Text B3</chapter>
</book>
<book title="C3">
  <chapter>Text C3</chapter>
</book>
<book title="D3">
  <chapter>Text D3</chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ec6c1e7f0917b83f0be76248feecbafb");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="A3">
  <chapter><![CDATA[Text A3]]></chapter>
</book>
<book title="B3">
  <chapter><![CDATA[Text B3]]></chapter>
</book>
<book title="C3">
  <chapter><![CDATA[Text C3]]></chapter>
</book>
<book title="D3">
  <chapter><![CDATA[Text D3]]></chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "078dd3dd08b0929a637078c60630efff");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PATCH {{service}}(/books/book)/chapter HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ce05f5aeca6fe71e006dc13dca6ee106");
});
%}

###
# PATCH outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..
PATCH {{service}}0x2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "163d8f2f62ad30a4dcebec3d190bb345");
});
%}

###
# PATCH outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..
PATCH {{service}}0x2f2a2f2e2e HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8e25262e8037a17c587ff22fc3d66770");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "590ee450a2a1eb5b929c24ca6d1ca468");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong/wrong HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fe0168098a86f92199ada0cf4738b28f");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 2x UID
# - xxx was created in the first book
PATCH {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "65c59fa7810648d630a58456ae00d270");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books/book%5B1%5D::before HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3a9eed1f1cc3dafba5f6f2645465767a");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books/book%5B1%5D::after HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c2c66a9372d723b5a005dda1fb55a49c");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books::first HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ae4be1513918d09a4512b107356d12fb");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books::last HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0b2de610cbc47560124b5a707200b30b");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books::wrong HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "03553e353e6c5bc9d69d57a5413d86c0");
});
%}

###
# PATCH does not support XPath functions als axis
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
# - URI: name(.)
PATCH {{service}}0x6e616d65282e29 HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "89c32e2a60bcd3da392b7d1ce3acd93e");
});
%}

###
# INvalid XPath /books/book[1]x
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books/book%5B1%5Dx HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8a0e6e102d8fb7f1796b32dc70fe0697");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-A 1x UID-M
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="Book-A" a="A" b="A" c="A" d="A">
  <chapter title="Chapter-A-A">
    <text title="Text A1"/>
    <text title="Text A2"/>
    <text title="Text A3"/>
  </chapter>
  <chapter title="Chapter-B">
    <text title="Text A4"/>
    <text title="Text A5"/>
    <text title="Text A6"/>
  </chapter>
</book>
<book title="Book-B" a="B" b="B" c="B" d="B">
  <chapter title="Chapter-B-A">
    <text title="Text B1"/>
    <text title="Text B2"/>
    <text title="Text B3"/>
  </chapter>
  <chapter title="Chapter-B-B">
    <text title="Text B4"/>
    <text title="Text B5"/>
    <text title="Text B6"/>
  </chapter>
</book>
<book title="Book-C" a="C" b="C" c="C" d="C">
  <chapter title="Chapter-C-A">
    <text title="Text C1"/>
    <text title="Text C2"/>
    <text title="Text C3"/>
  </chapter>
  <chapter title="Chapter-C-B">
    <text title="Text C4"/>
    <text title="Text C5"/>
    <text title="Text C6"/>
  </chapter>
</book>
<book title="Book-D" a="D" b="D" c="D" d="D">
  <chapter title="Chapter-D-A">
    <text title="Text D1"/>
    <text title="Text D2"/>
    <text title="Text D3"/>
  </chapter>
  <chapter title="Chapter-D-B">
    <text title="Text D4"/>
    <text title="Text D5"/>
    <text title="Text D6"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "083e279e7d07d76496f62a8f5670bc92");
});
%}

###
# Overwriting an element must work
# The indirectly deleted UIDs must be contained in Storage-Effect
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID-A, 8x UID-D, 1x UID-M
# - Storage-Revision is increased
PATCH {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_patch_element}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6"/>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f08c34425a25c0cb353b98729575bd05");
});
%}

###
# Recursive patching of all elements by a relative and generous XPath.
# The Storage-Effects must be optimized and obsolete entries must be cleaned up.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-D, 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - URI: //*[@___uid]
PATCH {{service}}0x2f2f2a5b405f5f5f7569645d HTTP/1.0
Storage: {{storage_patch_element}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8715fe0801f785dfeeacd85601736f0b");
});
%}

###

# Test sequence for patching elements in the storage.
# TODO:

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="A1"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c8936e03dacd4a11e419b60b83fbe39b");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_patch_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3293d571f7d70ede27d2cb4fa8abf61b");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID-A 1x UID-M
# - 4 books are overwritten
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="A2"/>
<book title="B2"/>
<book title="C2"/>
<book title="D2"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "228dd2ebe3b8ff6ad992552b1bf9859c");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="A3">
  <chapter>Text A3</chapter>
</book>
<book title="B3">
  <chapter>Text B3</chapter>
</book>
<book title="C3">
  <chapter>Text C3</chapter>
</book>
<book title="D3">
  <chapter>Text D3</chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2efaf41b7b70f29503e050797e2f35d6");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="A3">
  <chapter><![CDATA[Text A3]]></chapter>
</book>
<book title="B3">
  <chapter><![CDATA[Text B3]]></chapter>
</book>
<book title="C3">
  <chapter><![CDATA[Text C3]]></chapter>
</book>
<book title="D3">
  <chapter><![CDATA[Text D3]]></chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5db531056e443a9428b59097a08dfa75");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PATCH {{service}}(/books/book)/chapter HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f7ed03f00ca6d18487db8bb5189b7b76");
});
%}

###
# PATCH outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..
PATCH {{service}}0x2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b735a5a1b6ec13dfb27978f61897ea50");
});
%}

###
# PATCH outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..
PATCH {{service}}0x2f2a2f2e2e HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ed8caf1f9b6a2ed1d90dd71d513328bc");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3dc36ce95204d8a82e32e4ff952aae63");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong/wrong HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "73107f6af1463a2cb00271c733da6b5e");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 2x UID
# - xxx was created in the first book
PATCH {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0fda72fa3e403c989c569e4b9561bf81");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books/book%5B1%5D::before HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "fcebe34e7cc7b673c6da0217db2ef5b7");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books/book%5B1%5D::after HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a228c3d98adc3217e6e5ce022de3087a");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books::first HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0ec1c42c8e7b113838812aa37199056d");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books::last HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "cf2869fddc78d7c6dcdb5255d187995c");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books::wrong HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c89f86919b1806e4e1c82438cbf5af01");
});
%}

###
# PATCH does not support XPath functions als axis
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
# - URI: name(.)
PATCH {{service}}0x6e616d65282e29 HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "99ba74391248dcaae9dc4f2fc4e9425f");
});
%}

###
# INvalid XPath /books/book[1]x
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books/book%5B1%5Dx HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5172c90ee308d345094bdd4ddd318bd1");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-A 1x UID-M
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xslt+xml

<book title="Book-A" a="A" b="A" c="A" d="A">
  <chapter title="Chapter-A-A">
    <text title="Text A1"/>
    <text title="Text A2"/>
    <text title="Text A3"/>
  </chapter>
  <chapter title="Chapter-B">
    <text title="Text A4"/>
    <text title="Text A5"/>
    <text title="Text A6"/>
  </chapter>
</book>
<book title="Book-B" a="B" b="B" c="B" d="B">
  <chapter title="Chapter-B-A">
    <text title="Text B1"/>
    <text title="Text B2"/>
    <text title="Text B3"/>
  </chapter>
  <chapter title="Chapter-B-B">
    <text title="Text B4"/>
    <text title="Text B5"/>
    <text title="Text B6"/>
  </chapter>
</book>
<book title="Book-C" a="C" b="C" c="C" d="C">
  <chapter title="Chapter-C-A">
    <text title="Text C1"/>
    <text title="Text C2"/>
    <text title="Text C3"/>
  </chapter>
  <chapter title="Chapter-C-B">
    <text title="Text C4"/>
    <text title="Text C5"/>
    <text title="Text C6"/>
  </chapter>
</book>
<book title="Book-D" a="D" b="D" c="D" d="D">
  <chapter title="Chapter-D-A">
    <text title="Text D1"/>
    <text title="Text D2"/>
    <text title="Text D3"/>
  </chapter>
  <chapter title="Chapter-D-B">
    <text title="Text D4"/>
    <text title="Text D5"/>
    <text title="Text D6"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4386349558aebb9948dadbec418da1e7");
});
%}

###
# Overwriting an element must work
# The indirectly deleted UIDs must be contained in Storage-Effect
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID-A, 8x UID-D, 1x UID-M
# - Storage-Revision is increased
PATCH {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_patch_element}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6"/>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b91a03aead755c065d86a56476abc1d6");
});
%}

###
# Recursive patching of all elements by a relative and generous XPath.
# The Storage-Effects must be optimized and obsolete entries must be cleaned up.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-D, 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - URI: //*[@___uid]
PATCH {{service}}0x2f2f2a5b405f5f5f7569645d HTTP/1.0
Storage: {{storage_patch_element}}
Accept-Effects: ALL
Content-Type: application/xslt+xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d648ee71c755b241fb9954c012f67d14");
});
%}

###
